{
    "project": {
        "name": "SamsaraJS",
        "version": "0.2.0",
        "url": "http://www.samsaraJS.org",
        "exclude": "samsara.js,samsara.min.js",
        "description": "Streaming layout for the web"
    },
    "files": {
        "samsara/core/algebras/layout.js": {
            "name": "samsara/core/algebras/layout.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/algebras/size.js": {
            "name": "samsara/core/algebras/size.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/nodes/RenderTreeNode.js": {
            "name": "samsara/core/nodes/RenderTreeNode.js",
            "modules": {},
            "classes": {
                "RenderTreeNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/nodes/RootNode.js": {
            "name": "samsara/core/nodes/RootNode.js",
            "modules": {},
            "classes": {
                "RootNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/queues/dirtyQueue.js": {
            "name": "samsara/core/queues/dirtyQueue.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/queues/postTickQueue.js": {
            "name": "samsara/core/queues/postTickQueue.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/queues/preTickQueue.js": {
            "name": "samsara/core/queues/preTickQueue.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/queues/tickQueue.js": {
            "name": "samsara/core/queues/tickQueue.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/Controller.js": {
            "name": "samsara/core/Controller.js",
            "modules": {},
            "classes": {
                "Core.Controller": 1
            },
            "fors": {},
            "namespaces": {
                "Core": 1
            }
        },
        "samsara/core/ElementAllocator.js": {
            "name": "samsara/core/ElementAllocator.js",
            "modules": {},
            "classes": {
                "Core.ElementAllocator": 1
            },
            "fors": {},
            "namespaces": {
                "Core": 1
            }
        },
        "samsara/core/ElementOutput.js": {
            "name": "samsara/core/ElementOutput.js",
            "modules": {},
            "classes": {
                "Core.ElementOutput": 1
            },
            "fors": {},
            "namespaces": {
                "Core": 1
            }
        },
        "samsara/core/Engine.js": {
            "name": "samsara/core/Engine.js",
            "modules": {},
            "classes": {
                "Core.Engine": 1
            },
            "fors": {},
            "namespaces": {
                "Core": 1
            }
        },
        "samsara/core/LayoutNode.js": {
            "name": "samsara/core/LayoutNode.js",
            "modules": {},
            "classes": {
                "Core.LayoutNode": 1
            },
            "fors": {},
            "namespaces": {
                "Core": 1
            }
        },
        "samsara/core/OptionsManager.js": {
            "name": "samsara/core/OptionsManager.js",
            "modules": {},
            "classes": {
                "Core.OptionsManager": 1
            },
            "fors": {},
            "namespaces": {
                "Core": 1
            }
        },
        "samsara/core/SUE.js": {
            "name": "samsara/core/SUE.js",
            "modules": {},
            "classes": {
                "Core.SUE": 1
            },
            "fors": {},
            "namespaces": {
                "Core": 1
            }
        },
        "samsara/core/SizeNode.js": {
            "name": "samsara/core/SizeNode.js",
            "modules": {},
            "classes": {
                "Core.SizeNode": 1
            },
            "fors": {},
            "namespaces": {
                "Core": 1
            }
        },
        "samsara/core/Timer.js": {
            "name": "samsara/core/Timer.js",
            "modules": {},
            "classes": {
                "Core.Timer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/Transform.js": {
            "name": "samsara/core/Transform.js",
            "modules": {},
            "classes": {
                "Core.Transform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/Transitionable.js": {
            "name": "samsara/core/Transitionable.js",
            "modules": {},
            "classes": {
                "Core.Transitionable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/core/View.js": {
            "name": "samsara/core/View.js",
            "modules": {},
            "classes": {
                "Core.View": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/dom/ContainerSurface.js": {
            "name": "samsara/dom/ContainerSurface.js",
            "modules": {},
            "classes": {
                "DOM.ContainerSurface": 1
            },
            "fors": {},
            "namespaces": {
                "DOM": 1
            }
        },
        "samsara/dom/Context.js": {
            "name": "samsara/dom/Context.js",
            "modules": {},
            "classes": {
                "DOM.Context": 1
            },
            "fors": {},
            "namespaces": {
                "DOM": 1
            }
        },
        "samsara/dom/Surface.js": {
            "name": "samsara/dom/Surface.js",
            "modules": {},
            "classes": {
                "DOM.Surface": 1
            },
            "fors": {},
            "namespaces": {
                "DOM": 1
            }
        },
        "samsara/events/EventEmitter.js": {
            "name": "samsara/events/EventEmitter.js",
            "modules": {},
            "classes": {
                "Events.EventEmitter": 1
            },
            "fors": {},
            "namespaces": {
                "Events": 1
            }
        },
        "samsara/events/EventFilter.js": {
            "name": "samsara/events/EventFilter.js",
            "modules": {},
            "classes": {
                "Events.EventFilter": 1
            },
            "fors": {},
            "namespaces": {
                "Events": 1
            }
        },
        "samsara/events/EventHandler.js": {
            "name": "samsara/events/EventHandler.js",
            "modules": {},
            "classes": {
                "Events.EventHandler": 1
            },
            "fors": {},
            "namespaces": {
                "Events": 1
            }
        },
        "samsara/events/EventMapper.js": {
            "name": "samsara/events/EventMapper.js",
            "modules": {},
            "classes": {
                "Events.EventMapper": 1
            },
            "fors": {},
            "namespaces": {
                "Events": 1
            }
        },
        "samsara/events/EventSplitter.js": {
            "name": "samsara/events/EventSplitter.js",
            "modules": {},
            "classes": {
                "Events.EventSplitter": 1
            },
            "fors": {},
            "namespaces": {
                "Events": 1
            }
        },
        "samsara/inputs/GenericInput.js": {
            "name": "samsara/inputs/GenericInput.js",
            "modules": {},
            "classes": {
                "Inputs.GenericInput": 1
            },
            "fors": {},
            "namespaces": {
                "Inputs": 1
            }
        },
        "samsara/inputs/MouseInput.js": {
            "name": "samsara/inputs/MouseInput.js",
            "modules": {},
            "classes": {
                "Inputs.MouseInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/inputs/PinchInput.js": {
            "name": "samsara/inputs/PinchInput.js",
            "modules": {},
            "classes": {
                "Inputs.PinchInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/inputs/RotateInput.js": {
            "name": "samsara/inputs/RotateInput.js",
            "modules": {},
            "classes": {
                "Inputs.RotateInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/inputs/ScaleInput.js": {
            "name": "samsara/inputs/ScaleInput.js",
            "modules": {},
            "classes": {
                "Inputs.ScaleInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/inputs/ScrollInput.js": {
            "name": "samsara/inputs/ScrollInput.js",
            "modules": {},
            "classes": {
                "Inputs.ScrollInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/inputs/TouchInput.js": {
            "name": "samsara/inputs/TouchInput.js",
            "modules": {},
            "classes": {
                "Inputs.TouchInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/inputs/TouchTracker.js": {
            "name": "samsara/inputs/TouchTracker.js",
            "modules": {},
            "classes": {
                "Inputs.TouchTracker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/inputs/TwoFingerInput.js": {
            "name": "samsara/inputs/TwoFingerInput.js",
            "modules": {},
            "classes": {
                "Inputs.TwoFingerInput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/layouts/DrawerLayout.js": {
            "name": "samsara/layouts/DrawerLayout.js",
            "modules": {},
            "classes": {
                "Layouts.DrawerLayout": 1
            },
            "fors": {},
            "namespaces": {
                "Layouts": 1
            }
        },
        "samsara/layouts/FlexibleLayout.js": {
            "name": "samsara/layouts/FlexibleLayout.js",
            "modules": {},
            "classes": {
                "Layouts.FlexibleLayout": 1
            },
            "fors": {},
            "namespaces": {
                "Layouts": 1
            }
        },
        "samsara/layouts/GridLayout.js": {
            "name": "samsara/layouts/GridLayout.js",
            "modules": {},
            "classes": {
                "Layouts.GridLayout": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/layouts/SequentialLayout.js": {
            "name": "samsara/layouts/SequentialLayout.js",
            "modules": {},
            "classes": {
                "Layouts.SequentialLayout": 1
            },
            "fors": {},
            "namespaces": {
                "Layouts": 1
            }
        },
        "samsara/streams/Accumulator.js": {
            "name": "samsara/streams/Accumulator.js",
            "modules": {},
            "classes": {
                "Streams.Accumulator": 1
            },
            "fors": {},
            "namespaces": {
                "Streams": 1
            }
        },
        "samsara/streams/Differential.js": {
            "name": "samsara/streams/Differential.js",
            "modules": {},
            "classes": {
                "Streams.Differential": 1
            },
            "fors": {},
            "namespaces": {
                "Streams": 1
            }
        },
        "samsara/streams/Observable.js": {
            "name": "samsara/streams/Observable.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "samsara/streams/ResizeStream.js": {
            "name": "samsara/streams/ResizeStream.js",
            "modules": {},
            "classes": {
                "Streams.ResizeStream": 1
            },
            "fors": {},
            "namespaces": {
                "Streams": 1
            }
        },
        "samsara/streams/SimpleStream.js": {
            "name": "samsara/streams/SimpleStream.js",
            "modules": {},
            "classes": {
                "Streams.SimpleStream": 1
            },
            "fors": {},
            "namespaces": {
                "Streams": 1
            }
        },
        "samsara/streams/SizeObservable.js": {
            "name": "samsara/streams/SizeObservable.js",
            "modules": {},
            "classes": {
                "Streams.Observable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "samsara/streams/Stream.js": {
            "name": "samsara/streams/Stream.js",
            "modules": {},
            "classes": {
                "Streams.Stream": 1
            },
            "fors": {},
            "namespaces": {
                "Streams": 1
            }
        },
        "samsara/transitions/Inertia.js": {
            "name": "samsara/transitions/Inertia.js",
            "modules": {},
            "classes": {
                "Transitions.Inertia": 1
            },
            "fors": {},
            "namespaces": {
                "Transitions": 1
            }
        },
        "samsara/transitions/Spring.js": {
            "name": "samsara/transitions/Spring.js",
            "modules": {},
            "classes": {
                "Transitions.Spring": 1
            },
            "fors": {},
            "namespaces": {
                "Transitions": 1
            }
        },
        "samsara/transitions/Tween.js": {
            "name": "samsara/transitions/Tween.js",
            "modules": {},
            "classes": {
                "Transitions.Tween": 1
            },
            "fors": {},
            "namespaces": {
                "Transitions": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "RenderTreeNode": {
            "name": "RenderTreeNode",
            "shortname": "RenderTreeNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "samsara/core/nodes/RenderTreeNode.js",
            "line": 15,
            "description": "A node in the render tree. As such, it wraps a layout or size node,\n providing them with an `add` method. By adding nodes, the render tree\n is constructed, the leaves of which are `Surfaces`.",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object|SizeNode|LayoutNode|Surface|View"
                }
            ]
        },
        "RootNode": {
            "name": "RootNode",
            "shortname": "RootNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "samsara/core/nodes/RootNode.js",
            "line": 6,
            "description": "A RootNode is a first node in the Render Tree. It is like any other\n RenderTreeNode but with the additional responsibility of defining\n an allocating DOM node to render to.",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "extends": "Core.RenderTreeNode",
            "params": [
                {
                    "name": "allocator",
                    "description": "ElementAllocator",
                    "type": "ElementAllocator",
                    "optional": true
                }
            ]
        },
        "Core.Controller": {
            "name": "Core.Controller",
            "shortname": "Core.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Core",
            "file": "samsara/core/Controller.js",
            "line": 8,
            "description": "A utility class which can be extended by custom classes. These classes will then\n include event input and output streams, a optionsManager for handling optional\n parameters with defaults, and take an event dictionary.\n\n Specifically, instantiations will have an `options` dictionary property,\n `input`, `output` stream properties, and\n `on`, `off`, `emit`, `trigger`, `subscribe`, `unsubscribe` methods.",
            "example": [
                "\n\n     var MyClass = Controller.extend({\n         defaults : {\n             defaultOption1 : value1,\n             defaultOption2 : value2\n         },\n         events : {\n             'change' : myUpdateOptionsFunction\n         },\n         initialize : function(options){\n             // this method called on instantiation\n             // options are passed in after being patched by the specified defaults\n\n             this.input.on('test', function(){\n                 console.log('test fired');\n             });\n         }\n     });\n\n     var myInstance = new MyClass({\n         defaultOption1 : value3\n     });\n\n     // myInstance.options = {\n     //     defaultOption1 : value3,\n     //     defaultOption2 : value2\n     // }\n\n     myInstance.subscribe(anotherStream);\n\n     anotherStream.emit('test'); // \"test fired\" in console"
            ],
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "uses": [
                "Core.OptionsManager"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "Instance options",
                    "type": "Object"
                }
            ]
        },
        "Core.ElementAllocator": {
            "name": "Core.ElementAllocator",
            "shortname": "Core.ElementAllocator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Core",
            "file": "samsara/core/ElementAllocator.js",
            "line": 13,
            "description": "Handles creating, allocating and removing DOM elements within a provided DOM element.\n Manages a pool of nodes based on DOM tagName for DOM node reuse.\n When a Surface is deallocated, its element is cleared and put back in the pool.\n When a Surface is allocated, an existing cleared element of the same tagName is\n looked for. If it is not found, a new DOM element is created.",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "container",
                    "description": "DOM element",
                    "type": "Node"
                }
            ]
        },
        "Core.ElementOutput": {
            "name": "Core.ElementOutput",
            "shortname": "Core.ElementOutput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Core",
            "file": "samsara/core/ElementOutput.js",
            "line": 20,
            "description": "Responsible for committing CSS3 properties to the DOM and providing DOM event hooks\n from a provided DOM element. Where Surface's API handles inputs from the developer\n from within Samsara, ElementOutput handles the DOM interaction layer.",
            "is_constructor": 1,
            "uses": [
                "Core.LayoutNode",
                "Core.SizeNode"
            ],
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "document parent of this container",
                    "type": "Node"
                }
            ]
        },
        "Core.Engine": {
            "name": "Core.Engine",
            "shortname": "Core.Engine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Core",
            "file": "samsara/core/Engine.js",
            "line": 12,
            "description": "Engine is a singleton object that is required to run a Samsara application.\n It is the \"heartbeat\" of the application, managing the batching of streams\n and creating `RootNodes` and `Contexts` to begin render trees.\n\n It also listens and can respond to DOM events on the HTML `<body>` tag\n and `window` object. For instance the `resize` event.",
            "static": 1,
            "access": "private",
            "tagname": "",
            "uses": [
                "Core.EventHandler"
            ]
        },
        "Core.LayoutNode": {
            "name": "Core.LayoutNode",
            "shortname": "Core.LayoutNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Core.ElementOutput",
                "Core.View"
            ],
            "namespace": "Core",
            "file": "samsara/core/LayoutNode.js",
            "line": 9,
            "description": "Encapsulates a stream of layout data (transform, origin, align, opacity).\n Listens on start/update/end events, batches them, and emits them downstream\n to descendant layout nodes.",
            "example": [
                "\n\n     var context = Context();\n\n     var surface = new Surface({\n         size : [100,100],\n         properties : {background : 'red'}\n     });\n\n     var opacity = new Transitionable(1);\n\n     var layout = new LayoutNode({\n         transform : Transform.translateX(100),\n         opacity : opacity\n     });\n\n     context.add(layout).add(surface);\n     context.mount(document.body)\n\n     opacity.set(0, {duration : 1000});"
            ],
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "sources",
                    "description": "Object of layout sources",
                    "type": "Object",
                    "props": [
                        {
                            "name": "transform",
                            "description": "Transform source",
                            "type": "Stream|Transform",
                            "optional": true
                        },
                        {
                            "name": "align",
                            "description": "Align source",
                            "type": "Stream|Array",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "Origin source",
                            "type": "Stream|Array",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "description": "Opacity source",
                            "type": "Stream|Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Core.OptionsManager": {
            "name": "Core.OptionsManager",
            "shortname": "Core.OptionsManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Core.Controller",
                "Inputs.PinchInput",
                "Inputs.RotateInput",
                "Inputs.ScaleInput",
                "Inputs.ScrollInput",
                "Inputs.TouchInput",
                "Inputs.TouchTracker",
                "Streams.Differential"
            ],
            "namespace": "Core",
            "file": "samsara/core/OptionsManager.js",
            "line": 14,
            "description": "A utility for setting options in a class that enables patching options\n with prescribed defaults and emitting `change` events when options are changed.\n Recursively defined for nested options objects.\n\n Note: only JSONable objects are allowed, so no functions.",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "uses": [
                "Core.EventHandler"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "Options object literal",
                    "type": "Object"
                }
            ]
        },
        "Core.SUE": {
            "name": "Core.SUE",
            "shortname": "Core.SUE",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Core",
            "file": "samsara/core/SUE.js",
            "line": 13,
            "description": "SUE specified the global state of the application, whether it is in a\n `start`, `update` or `end` state. This is necessary for coordinating\n `resize` events with `start`, `update`, `end` states in stream.",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "Core.SizeNode": {
            "name": "Core.SizeNode",
            "shortname": "Core.SizeNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Core.ElementOutput",
                "Core.View"
            ],
            "namespace": "Core",
            "file": "samsara/core/SizeNode.js",
            "line": 9,
            "description": "Encapsulates a stream of size data (size, proportions, margins).\n Listens on start/update/end events, batches them, and emits resize events downstream\n to descendant size nodes.\n\n Size can be defined with height and width given numerically, but\n they can also be:\n\n ```\n     `undefined` - takes the parent value\n     `true`      - takes the DOM calculated value\n     `false`     - value defined by setting an aspect ratio\n ```",
            "example": [
                "\n\n     var context = Context();\n\n     var surface = new Surface({\n         size : [100,100],\n         properties : {background : 'red'}\n     });\n\n     var sizeNode = new SizeNode({\n         size : [100, undefined],\n         margins : [50, 50]\n     });\n\n     context.add(sizeNode).add(surface);\n     context.mount(document.body)"
            ],
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "sources",
                    "description": "Object of size sources",
                    "type": "Object",
                    "props": [
                        {
                            "name": "size",
                            "description": "Size source",
                            "type": "Stream|Array",
                            "optional": true
                        },
                        {
                            "name": "margin",
                            "description": "Margin source",
                            "type": "Stream|Array",
                            "optional": true
                        },
                        {
                            "name": "proportions",
                            "description": "Proportions source",
                            "type": "Stream|Array",
                            "optional": true
                        },
                        {
                            "name": "aspectRatio",
                            "description": "Aspect ratio source",
                            "type": "Stream|Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Core.Timer": {
            "name": "Core.Timer",
            "shortname": "Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Core",
            "file": "samsara/core/Timer.js",
            "line": 14,
            "description": "A collection of timing utilities meant to translate the familiar setInterval, setTimeout\n timers to use Samsara's internal clock, which is backed by a requestAnimationFrame (RAF) loop.\n It also includes other helpful methods for debouncing.",
            "example": [
                "\n\n     Timer.setTimeout(function(){\n         alert('I will execute after 1 second');\n     }, 1000);\n\n     Timer.after(function(){\n         alert('I will execute on the following RAF loop');\n     }, 1);\n\n     var debouncedResize = Timer.debounce(function(){\n         // this code will execute when the `resize` event\n         // has stopped firing (for the last 200 milliseconds)\n     }, 200);\n\n     Engine.on('resize', function(){\n         debounceResize();\n     });"
            ],
            "static": 1
        },
        "Core.Transform": {
            "name": "Core.Transform",
            "shortname": "Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Core",
            "file": "samsara/core/Transform.js",
            "line": 13,
            "description": "A library for creating and composing CSS3 matrix transforms.\n A Transform is a 16 element float array `t = [t0, ..., t15]`\n that corresponds to a 4x4 transformation matrix (in row-major order)\n\n ```\n   ┌               ┐\n   │ t0  t1  t2  0 │\n   │ t4  t5  t6  0 │\n   │ t8  t9  t10 0 │\n   │ t12 t13 t14 1 │\n   └               ┘\n ```\n\n This matrix is a data structure encoding a combination of translation,\n scale, skew and rotation components.\n\n Note: these matrices are transposes from their mathematical counterparts.",
            "example": [
                "\n\n     var layoutNode = var LayoutNode({\n         transform : Transform.translate([100,200,50])\n     });",
                "\n\n     var transitionable = new Transitionable(0);\n\n     var transform = transitionable.map(function(value){\n         return Transform.scaleX(value);\n     });\n\n     var layoutNode = var LayoutNode({\n         transform : transform\n     });\n\n     transitionable.set(100, {duration : 500});"
            ],
            "static": 1
        },
        "Core.Transitionable": {
            "name": "Core.Transitionable",
            "shortname": "Transitionable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Core",
            "file": "samsara/core/Transitionable.js",
            "line": 21,
            "description": "A way to transition numeric values and arrays of numbers between start and end states.\n Transitions are given an easing curve and a duration.\n Non-numeric values are ignored.",
            "example": [
                "\n\n     var transitionable = new Transitionable(0);\n\n     transitionable.set(100, {duration : 1000, curve : 'easeIn'});\n\n     transitionable.on('start', function(value){\n         console.log(value); // 0\n     });\n\n     transitionable.on('update', function(value){\n         console.log(value); // numbers between 0 and 100\n     });\n\n     transitionable.on('end', function(value){\n         console.log(value); // 100\n     });"
            ],
            "is_constructor": 1,
            "extends": "Streams.SimpleStream",
            "params": [
                {
                    "name": "value",
                    "description": "Starting value",
                    "type": "Number|Number[]"
                }
            ]
        },
        "Core.View": {
            "name": "Core.View",
            "shortname": "View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Core",
            "file": "samsara/core/View.js",
            "line": 16,
            "description": "A View provides encapsulation for a subtree of the render tree. You can build\n complicated visual components and add them to a render tree as you would a `Surface`.\n\n Custom `Views` are created by calling `extend` on the `View` constructor.\n\n In addition to what a `Controller` provides, a View provides:\n\n     Render Tree method: `.add`\n     Size methods: `setSize`, `setProportions`\n     Layout methods: `setOpacity`, `setOrigin`",
            "example": [
                "\n\n     var MyView = View.extend({\n         defaults : {\n             defaultOption1 : '',\n             defaultOption2 : 42\n         },\n         initialize : function(options){\n             // this method called on instantiation\n             // options are passed in after being patched by the specified defaults\n\n             var surface = new Surface({\n                 content : options.defaultOption1,\n                 size : [options.defaultOption2,100],\n                 properties : {background : 'red'}\n             });\n\n             this.add(surface);\n         }\n     });\n\n     var myView = new myView({defaultOption1 : 'hello'});\n\n     var context = Context();\n     context.add(myView);\n\n     context.mount(document.body);"
            ],
            "is_constructor": 1,
            "extends": "Core.Controller",
            "uses": [
                "Core.SizeNode",
                "Core.LayoutNode",
                "Core.SimpleStream"
            ]
        },
        "DOM.ContainerSurface": {
            "name": "DOM.ContainerSurface",
            "shortname": "DOM.ContainerSurface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "DOM",
            "file": "samsara/dom/ContainerSurface.js",
            "line": 7,
            "description": "ContainerSurface enables nesting of DOM. A ContainerSurface manages\n its own render tree that it inserts inside a DOM node. Typically\n this is used for clipping by settings `{overflow : hidden}` as a CSS\n property.",
            "example": [
                "\n\n     var myContainer = new ContainerSurface({\n         size : [100,100],\n         properties : {overflow : hidden}\n     });\n\n     var surface = new Surface({\n         size : [200,200],\n         properties : {background : 'red'}\n     });\n\n     myContainer.add(surface);\n\n     context.add(myContainer);"
            ],
            "extends": "DOM.Surface",
            "uses": [
                "DOM.Context"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "Size (width, height) in pixels. These can also be `true` or `undefined`.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "classes",
                            "description": "CSS classes",
                            "type": "String[]",
                            "optional": true
                        },
                        {
                            "name": "properties",
                            "description": "Dictionary of CSS properties",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "attributes",
                            "description": "Dictionary of HTML attributes",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "content",
                            "description": "Sstring}              InnerHTML content",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "Origin (x,y), with values between 0 and 1",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "margins",
                            "description": "Margins (x,y) in pixels",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "proportions",
                            "description": "Proportions (x,y) with values between 0 and 1",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "aspectRatio",
                            "description": "Aspect ratio",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "description": "Opacity",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "tagName",
                            "description": "HTML tagName",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"div\""
                        },
                        {
                            "name": "enableScroll",
                            "description": "Allows a Surface to support native scroll behavior",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "roundToPixel",
                            "description": "Prevents text-blurring if set to true, at the cost to jittery animation",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "DOM.Context": {
            "name": "DOM.Context",
            "shortname": "DOM.Context",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "DOM.ContainerSurface"
            ],
            "namespace": "DOM",
            "file": "samsara/dom/Context.js",
            "line": 30,
            "description": "A Context defines a top-level DOM element inside which other nodes (like Surfaces) are rendered.\n\n The CSS class `samsara-context` is applied, which provides the minimal CSS necessary\n to create a performant 3D context (specifically `preserve-3d`).\n\n The Context must be mounted to a DOM node via the `mount` method. If no node is specified\n it is mounted to `document.body`.",
            "example": [
                "\n\n     var context = Context();\n\n     var surface = new Surface({\n         size : [100,100],\n         properties : {background : 'red'}\n     });\n\n     context.add(surface);\n     context.mount(document.body)"
            ],
            "is_constructor": 1,
            "uses": [
                "Core.RootNode"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "enableScroll",
                            "description": "Allow scrolling on mobile devices",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "DOM.Surface": {
            "name": "DOM.Surface",
            "shortname": "DOM.Surface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "DOM",
            "file": "samsara/dom/Surface.js",
            "line": 11,
            "description": "Surface is a wrapper for a DOM element animated by Samsara.\n Samsara will commit opacity, size and CSS3 `transform` properties into the Surface.\n CSS classes, properties and DOM attributes can also be added and dynamically changed.\n Surfaces also act as sources for DOM events such as `click`.",
            "example": [
                "\n\n     var context = new Context()\n\n     var surface = new Surface({\n         content : 'Hello world!',\n         size : [true,100],\n         opacity : .5,\n         classes : ['myClass1', 'myClass2'],\n         properties : {background : 'red'}\n     });\n\n     context.add(surface);\n\n     context.mount(document.body);",
                "\n\n     // same as above but create an image instead\n     var surface = new Surface({\n         tagName : 'img',\n         attributes : {\n             src : 'cat.jpg'\n         },\n         size : [100,100]\n     });"
            ],
            "is_constructor": 1,
            "extends": "Core.ElementOutput",
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "Size (width, height) in pixels. These can also be `true` or `undefined`.",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "classes",
                            "description": "CSS classes",
                            "type": "String[]",
                            "optional": true
                        },
                        {
                            "name": "properties",
                            "description": "Dictionary of CSS properties",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "attributes",
                            "description": "Dictionary of HTML attributes",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "content",
                            "description": "Sstring}        InnerHTML content",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "Origin (x,y), with values between 0 and 1",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "margins",
                            "description": "Margins (x,y) in pixels",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "proportions",
                            "description": "Proportions (x,y) with values between 0 and 1",
                            "type": "Number[]",
                            "optional": true
                        },
                        {
                            "name": "aspectRatio",
                            "description": "Aspect ratio",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "opacity",
                            "description": "Opacity",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "tagName",
                            "description": "HTML tagName",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"div\""
                        },
                        {
                            "name": "enableScroll",
                            "description": "Allows a Surface to support native scroll behavior",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "roundToPixel",
                            "description": "Prevents text-blurring if set to true, at the cost to jittery animation",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Events.EventEmitter": {
            "name": "Events.EventEmitter",
            "shortname": "Events.EventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Events",
            "file": "samsara/events/EventEmitter.js",
            "line": 12,
            "description": "EventEmitter represents an asynchronous channel for broadcasting and receiving events.",
            "example": [
                "\n\n     var eventEmitter = new EventEmitter();\n\n     eventEmitter.on('send', function(payload){\n         console.log(payload) // {data : 0}\n     });\n\n     // sometime later...\n     eventEmitter.emit('send', {data : 0});"
            ],
            "is_constructor": 1
        },
        "Events.EventFilter": {
            "name": "Events.EventFilter",
            "shortname": "Events.EventFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Events",
            "file": "samsara/events/EventFilter.js",
            "line": 14,
            "description": "EventFilter regulates the broadcasting of events based on\n a specified condition prescribed by a provided function\n with the signature `(data) -> Boolean`",
            "example": [
                "\n\n     var eventFilter = new EventFilter(function(payload){\n         return (payload.value == 0);\n     });\n\n     var eventEmitter = new EventEmitter();\n\n     eventFilter.subscribe(eventEmitter);\n\n     eventFilter.on('click', function(data){\n         alert('fired');\n     });\n\n     eventEmitter.emit('click', {value : 0}); // fired\n     eventEmitter.emit('click', {value : 1}); // doesn't fire"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "filter",
                    "description": "Function returning a Boolean",
                    "type": "Function"
                }
            ]
        },
        "Events.EventHandler": {
            "name": "Events.EventHandler",
            "shortname": "Events.EventHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Events",
            "file": "samsara/events/EventHandler.js",
            "line": 14,
            "description": "EventHandler extends EventEmitter to provide subscription methods.\n It also includes helper methods on the constructor for setting up Controllers and Views\n with input and output emitters.",
            "example": [
                "\n\n     var eventHandlerA = new EventHandler();\n     var eventHandlerB = new EventHandler();\n\n     eventHandlerB.subscribe(eventHandlerA);\n\n     eventHandlerB.on('name', function(payload){\n         console.log(payload) // {data : 0}\n     });\n\n     eventHandlerA.emit('name', {data : 0});"
            ],
            "extends": "Events.EventEmitter",
            "is_constructor": 1
        },
        "Events.EventMapper": {
            "name": "Events.EventMapper",
            "shortname": "Events.EventMapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Events",
            "file": "samsara/events/EventMapper.js",
            "line": 6,
            "description": "EventMapper modifies the data payload of an event based on\n a provided function.\n\n Note: it does not modify the event's `type`.",
            "example": [
                "\n\n     var eventMapper = new EventMapper(function(payload){\n         return payload.x + payload.y\n     });\n\n     var eventEmitter = new EventEmitter();\n\n     eventMapper.subscribe(eventEmitter);\n\n     eventMapper.on('name', function(value){\n         alert(value);\n     });\n\n     eventEmitter.emit('name', {x : 1, y : 2}); // alerts 3"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "Function to modify the event payload",
                    "type": "Function"
                }
            ]
        },
        "Events.EventSplitter": {
            "name": "Events.EventSplitter",
            "shortname": "Events.EventSplitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Events",
            "file": "samsara/events/EventSplitter.js",
            "line": 14,
            "description": "EventSplitter routes events to various event destinations\n based on custom logic. The return of the provided splitter\n function should be of type EventEmitter.",
            "example": [
                "\n\n     var eventEmitter = new EventEmitter();\n     var eventEmitterX = new eventEmitter();\n     var eventEmitterY = new eventEmitter();\n\n     var eventSplitter = new EventSplitter(function(payload){\n         return (payload.x > payload.y)\n             ? eventEmitterX;\n             : eventEmitterY;\n     });\n\n     eventSplitter.subscribe(eventEmitter);\n\n     eventEmitterX.on('move', function(){\n         console.log('x is bigger')\n     });\n\n     eventEmitterY.on('move', function(){\n         console.log('y is bigger')\n     })\n\n     eventEmitter.emit('move', {x : 3, y : 2}); // x is bigger"
            ],
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "splitter",
                    "description": "",
                    "type": "Function"
                }
            ]
        },
        "Inputs.GenericInput": {
            "name": "Inputs.GenericInput",
            "shortname": "Inputs.GenericInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Inputs",
            "file": "samsara/inputs/GenericInput.js",
            "line": 18,
            "description": "Combines multiple inputs (e.g., mouse, touch, scroll) into one unified input.\n Inputs must first be registered on the constructor by a unique identifier,\n then they can be accessed on instantiation.",
            "example": [
                "\n\n     // In main.js\n     GenericInput.register({\n         \"mouse\" : MouseInput,\n         \"touch\" : TouchInput\n     });\n\n     // in myFile.js\n     var input = new GenericInput(['mouse', 'touch'], options);"
            ],
            "is_constructor": 1,
            "extends": "Streams.SimpleStream",
            "params": [
                {
                    "name": "inputs",
                    "description": "Dictionary with {identifier : option} pairs\n                                 or an array of identifier strings",
                    "type": "Object|String[]"
                },
                {
                    "name": "options",
                    "description": "Options for all inputs",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "Inputs.MouseInput": {
            "name": "Inputs.MouseInput",
            "shortname": "MouseInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Inputs",
            "file": "samsara/inputs/MouseInput.js",
            "line": 19,
            "description": "Wrapper for DOM mouse events. Converts\n\n     `mousedown` -> `start`\n     `mousemove` -> `update`\n     `mouseup`   -> `end`\n\nMouseInput emits these events with the following payload data:\n\n     `value`     - Displacement in pixels from `mousedown`\n     `delta`     - Differential in pixels between successive mouse positions\n     `velocity`  - Velocity of mouse movement in pixels per second\n     `cumulate`  - Accumulated value over successive displacements\n     `clientX`   - DOM event clientX property\n     `clientY`   - DOM event clientY property\n     `offsetX`   - DOM event offsetX property\n     `offsetY`   - DOM event offsetY property",
            "example": [
                "\n\n     var surface = new Surface({\n         size : [100,100],\n         properties : {background : 'red'}\n     });\n\n     var mouseInput = new MouseInput({\n         direction : MouseInput.DIRECTION.X\n     });\n\n     mouseInput.subscribe(surface);\n\n     mouseInput.on('start', function(payload){\n         // fired on mouse down\n         console.log('start', payload);\n     });\n\n     mouseInput.on('update', function(payload){\n         // fired on mouse move\n         console.log('update', payload);\n     });\n\n     mouseInput.on('end', function(payload){\n         // fired on mouse up\n         console.log('end', payload);\n     });"
            ],
            "is_constructor": 1,
            "extends": "SimpleStream",
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "direction",
                            "description": "Direction to project movement onto.\n                                         Options found in MouseInput.DIRECTION.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "Scale the response to the mouse",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ]
        },
        "Inputs.PinchInput": {
            "name": "Inputs.PinchInput",
            "shortname": "PinchInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Inputs",
            "file": "samsara/inputs/PinchInput.js",
            "line": 15,
            "description": "Detects two-finger pinching motion and emits `start`, `update` and\n `end` events with the payload data:\n\n     `value`         - Distance between the two touches\n     `delta`         - Differential in successive distances\n     `velocity`      - Relative velocity between two touches\n     `displacement`  - Total accumulated displacement\n     `center`        - Midpoint between the two touches\n     `touchIds`      - Array of DOM event touch identifiers",
            "example": [
                "\n\n     var pinchInput = new PinchInput();\n\n     pinchInput.subscribe(Engine) // listens on `window` events\n\n     pinchInput.on('start', function(payload){\n         console.log('start', payload);\n     });\n\n     pinchInput.on('update', function(payload){\n         console.log('update', payload);\n     });\n\n     pinchInput.on('end', function(payload){\n         console.log('end', payload);\n     });"
            ],
            "extends": "Inputs.TwoFingerInput",
            "uses": [
                "Core.OptionsManager"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "scale",
                            "description": "Scale the response to pinch",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ]
        },
        "Inputs.RotateInput": {
            "name": "Inputs.RotateInput",
            "shortname": "RotateInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Inputs",
            "file": "samsara/inputs/RotateInput.js",
            "line": 15,
            "description": "Detects two-finger rotational motion and emits `start`, `update` and\n `end` events with the payload data:\n\n     `value`         - Angle of rotation\n     `delta`         - Differential of successive angles\n     `velocity`      - Velocity of rotation\n     `center`        - Midpoint between the two touches\n     `touchIds`       - Array of DOM event touch identifiers",
            "example": [
                "\n\n     var rotateInput = new RotateInput();\n\n     rotateInput.subscribe(Engine) // listens on `window` events\n\n     rotateInput.on('start', function(payload){\n         console.log('start', payload);\n     });\n\n     rotateInput.on('update', function(payload){\n         console.log('update', payload);\n     });\n\n     rotateInput.on('end', function(payload){\n         console.log('end', payload);\n     });"
            ],
            "extends": "Inputs.TwoFingerInput",
            "uses": [
                "Core.OptionsManager"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "scale",
                            "description": "Scale the response to pinch",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ]
        },
        "Inputs.ScaleInput": {
            "name": "Inputs.ScaleInput",
            "shortname": "ScaleInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Inputs",
            "file": "samsara/inputs/ScaleInput.js",
            "line": 15,
            "description": "Detects two-finger pinching motion and emits `start`, `update` and\n `end` events with the payload data:\n\n     `value`         - Distance between the two touches\n     `delta`         - Differential in successive distances\n     `velocity`      - Relative velocity between two touches\n     `displacement`  - Total accumulated displacement\n     `center`        - Midpoint between the two touches\n     `touchIds`       - Array of DOM event touch identifiers\n\n Note: Unlike PinchInput, which produces pixel values of displacement\n between two touches, ScaleInput produces dimensionless values corresponding\n to scaling of the initial distance between the touches. For example, if two\n touches begin at 100 px apart, and move to 200 px apart, ScaleInput will emit\n a value of 2 (for 2x magnification), while PinchInput will emit a value of 100.",
            "example": [
                "\n\n     var scaleInput = new ScaleInput();\n\n     scaleInput.subscribe(Engine) // listens on `window` events\n\n     scaleInput.on('start', function(payload){\n         console.log('start', payload);\n     });\n\n     scaleInput.on('update', function(payload){\n         console.log('update', payload);\n     });\n\n     scaleInput.on('end', function(payload){\n         console.log('end', payload);\n     });"
            ],
            "extends": "Inputs.TwoFingerInput",
            "uses": [
                "Core.OptionsManager"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "scale",
                            "description": "Scale the response to pinch",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ]
        },
        "Inputs.ScrollInput": {
            "name": "Inputs.ScrollInput",
            "shortname": "ScrollInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Inputs",
            "file": "samsara/inputs/ScrollInput.js",
            "line": 20,
            "description": "Wrapper for DOM wheel/mousewheel events. Converts `scroll` events\n to `start`, `update` and `end` events and emits them with the payload:\n\n     `value`     - Scroll displacement in pixels from start\n     `delta`     - Scroll differential in pixels between subsequent events\n     `velocity`  - Velocity of scroll,\n     `clientX`   - DOM event clientX property\n     `clientY`   - DOM event clientY property\n     `offsetX`   - DOM event offsetX property\n     `offsetY`   - DOM event offsetY property",
            "example": [
                "\n\n     var scrollInput = new ScrollInput();\n\n     scrollInput.subscribe(Engine) // listens on `window` events\n\n     scrollInput.on('start', function(payload){\n         console.log('start', payload);\n     });\n\n     scrollInput.on('update', function(payload){\n         console.log('update', payload);\n     });\n\n     scrollInput.on('end', function(payload){\n         console.log('end', payload);\n     });"
            ],
            "is_constructor": 1,
            "extends": "Streams.SimpleStream",
            "uses": [
                "Inputs.TouchTracker",
                "Core.OptionsManager"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "direction",
                            "description": "Direction to project movement onto.\n                                         Options found in TouchInput.DIRECTION.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "Scale the response to the mouse",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ]
        },
        "Inputs.TouchInput": {
            "name": "Inputs.TouchInput",
            "shortname": "TouchInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Inputs",
            "file": "samsara/inputs/TouchInput.js",
            "line": 19,
            "description": "Wrapper for DOM touch events. Converts\n\n     `touchstart` -> `start`\n     `touchmove`  -> `update`\n     `touchend`   -> `end`\n\nTouchInput emits these events with the following payload data:\n\n     `value`     - Displacement in pixels from `touchstart`\n     `delta`     - Differential in pixels between successive mouse positions\n     `velocity`  - Velocity of mouse movement in pixels per second\n     `cumulate`  - Accumulated displacement over successive displacements\n     `clientX`   - DOM event clientX property\n     `clientY`   - DOM event clientY property\n     `count`     - DOM event for number of simultaneous touches\n     `touchId`     - DOM touch event identifier",
            "example": [
                "\n\n     var touchInput = new TouchInput({\n         direction : TouchInput.DIRECTION.Y\n     });\n\n     touchInput.subscribe(Engine);\n\n     touchInput.on('start', function(payload){\n         // fired on mouse down\n         console.log('start', payload);\n     });\n\n     touchInput.on('update', function(payload){\n         // fired on mouse move\n         console.log('update', payload);\n     });\n\n     touchInput.on('end', function(payload){\n         // fired on mouse up\n         console.log('end', payload);\n     });"
            ],
            "is_constructor": 1,
            "extends": "Streams.SimpleStream",
            "uses": [
                "Inputs.TouchTracker",
                "Core.OptionsManager"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "direction",
                            "description": "Direction to project movement onto.\n                                         Options found in TouchInput.DIRECTION.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "Scale the response to the mouse",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ]
        },
        "Inputs.TouchTracker": {
            "name": "Inputs.TouchTracker",
            "shortname": "TouchTracker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Inputs.ScrollInput",
                "Inputs.TouchInput"
            ],
            "namespace": "Inputs",
            "file": "samsara/inputs/TouchTracker.js",
            "line": 19,
            "description": "Catalogues a history of touch events. Useful for creating more complex\n touch recognition for gestures. Currently only used by TouchInput to\n track previous touches to compute velocity.\n\nTouchTracker emits these events with the following payload data:\n\n     `x`             - Displacement in x-direction\n     `y`             - Displacement in y-direction\n     `identifier`    - DOM event touch identifier\n     `timestamp`     - Timestamp\n     `count`         - DOM event for number of simultaneous touches\n     `history`       - History of touches for the gesture",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "uses": [
                "Core.OptionsManager"
            ],
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "limit",
                            "description": "Number of touches to record",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Inputs.TwoFingerInput": {
            "name": "Inputs.TwoFingerInput",
            "shortname": "TwoFingerInput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Inputs",
            "file": "samsara/inputs/TwoFingerInput.js",
            "line": 20,
            "description": "Generalizes handling of two-finger touch events.\n Helper to PinchInput, RotateInput, and ScaleInput.\n This class is meant to be overridden and not used directly.",
            "extends": "Streams.SimpleStream",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "Layouts.DrawerLayout": {
            "name": "Layouts.DrawerLayout",
            "shortname": "Layouts.DrawerLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Layouts",
            "file": "samsara/layouts/DrawerLayout.js",
            "line": 30,
            "description": "A layout composed of two sections: content and drawer.\n\n The drawer is initially hidden behind the content, until it is moved\n by a call to setPosition. The source of the movement can be by subscribing\n the layout to user input (like a Mouse/Touch/Scroll input), or by manually\n calling setPosition with a transition.\n\n The layout emits a `start`, `update` and `end` Stream with payload\n\n     `progress` - Number between 0 and 1 indicating how open the drawer is\n     `value` - Pixel displacement in how open the drawer is\n\n It also emits `close` and `open` events.\n\n The drawer can be revealed from any side of the content (top, left, bottom, right),\n by specifying a side option.",
            "is_constructor": 1,
            "extends": "Core.View",
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "side",
                            "description": "Side to reveal the drawer from. Defined in DrawerLayout.SIDES",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "revealLength",
                            "description": "The maximum length to reveal the drawer",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "velocityThreshold",
                            "description": "The velocity needed to complete the drawer transition",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "positionThreshold",
                            "description": "The displacement needed to complete the drawer transition",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "transitionClose",
                            "description": "A transition definition for closing the drawer",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "transitionOpen",
                            "description": "A transition definition for opening the drawer",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Layouts.FlexibleLayout": {
            "name": "Layouts.FlexibleLayout",
            "shortname": "Layouts.FlexibleLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Layouts",
            "file": "samsara/layouts/FlexibleLayout.js",
            "line": 18,
            "description": "A layout which arranges items vertically or horizontally and\n with sizes prescribed by ratios of a containing size. These\n ratios can be animated.",
            "is_constructor": 1,
            "extends": "Core.View",
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "direction",
                            "description": "Direction to lay out items",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "ratios",
                            "description": "The proportions",
                            "type": "Transitionable|Array",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Layouts.GridLayout": {
            "name": "Layouts.GridLayout",
            "shortname": "GridLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Layouts",
            "file": "samsara/layouts/GridLayout.js",
            "line": 11,
            "description": "A layout that arranges items in a grid and can rearrange the grid responsively.\n\n The user provides the number of items per row in an array or a dictionary\n with keys that are pixel values. The items will be sized to fill the available space.\n\n Let itemsPerRow be a dictionary if you want the grid to rearrange responsively. The\n keys should be pixel values. The row arrangement will be one of the entries of\n the dictionary whose key value is closest to the parent width without exceeding it.",
            "is_constructor": 1,
            "extends": "Core.View",
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "itemsPerRow",
                            "description": "Number of items per row, or an object of {width : itemsPerRow} pairs",
                            "type": "Array|Object"
                        },
                        {
                            "name": "gutter",
                            "description": "Gap space between successive items",
                            "type": "Transitionable|Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ]
        },
        "Layouts.SequentialLayout": {
            "name": "Layouts.SequentialLayout",
            "shortname": "Layouts.SequentialLayout",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Layouts",
            "file": "samsara/layouts/SequentialLayout.js",
            "line": 16,
            "description": "A layout which arranges items in series based on their size.\n Items can be arranged vertically or horizontally.",
            "is_constructor": 1,
            "extends": "Core.View",
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "direction",
                            "description": "Direction to lay out items",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "spacing",
                            "description": "Gutter spacing between items",
                            "type": "Transitionable|Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Streams.Accumulator": {
            "name": "Streams.Accumulator",
            "shortname": "Streams.Accumulator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Streams",
            "file": "samsara/streams/Accumulator.js",
            "line": 9,
            "description": "Accumulator is a Stream that accumulates a value given by a\n number or array of numbers.\n\n It emits `start`, `update` and `end` events.",
            "example": [
                "\n\n     var accumulator = new Accumulator(0);\n\n     // this gives the total displacement of mouse input\n     accumulator.subscribe(mouseInput.pluck('delta'));"
            ],
            "extends": "Streams.Stream",
            "is_constructor": 1,
            "params": [
                {
                    "name": "sum",
                    "description": "Initial value",
                    "type": "Number|Array",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "min",
                            "description": "Set a minimum value",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "max",
                            "description": "Set a maximum value",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Streams.Differential": {
            "name": "Streams.Differential",
            "shortname": "Streams.Differential",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Streams",
            "file": "samsara/streams/Differential.js",
            "line": 7,
            "description": "Differential is a Stream that emits differentials of consecutive\n input values.\n\n It emits `start`, `update` and `end` events.",
            "example": [
                "\n\n     var differential = new Differential();\n     // this gives differentials of mouse input\n     differential.subscribe(mouseInput.pluck('value'));"
            ],
            "extends": "Streams.Stream",
            "uses": [
                "Core.OptionsManager"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "scale",
                            "description": "Scale to apply to differential",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Streams.Observable": {
            "name": "Streams.Observable",
            "shortname": "Observable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Streams",
            "file": "samsara/streams/SizeObservable.js",
            "line": 8,
            "description": "A SizeObservable is a stream for resize events set discretely in time, as opposed to continuously.\n It emits appropriate `resize` events upon calling the `set` method.",
            "is_constructor": 1,
            "access": "private",
            "tagname": "",
            "extends": "Streams.SimpleStream",
            "params": [
                {
                    "name": "value",
                    "description": "Size",
                    "type": "Array"
                }
            ]
        },
        "Streams.ResizeStream": {
            "name": "Streams.ResizeStream",
            "shortname": "Streams.ResizeStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Streams",
            "file": "samsara/streams/ResizeStream.js",
            "line": 17,
            "description": "ResizeStream is a stream that listens to and emits `resize` events.",
            "access": "private",
            "tagname": "",
            "extends": "Streams.Stream",
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "resize",
                            "description": "Custom logic to map the `resize` event",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "is_constructor": 1
        },
        "Streams.SimpleStream": {
            "name": "Streams.SimpleStream",
            "shortname": "Streams.SimpleStream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Streams",
            "file": "samsara/streams/SimpleStream.js",
            "line": 9,
            "description": "A SimpleStream wraps an EventHandler and provides convenience\n methods of `map`, `filter`, `split`, and `pluck` to\n transform one stream into another.",
            "example": [
                ""
            ],
            "extends": "Core.EventHandler",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "Streams.Stream": {
            "name": "Streams.Stream",
            "shortname": "Streams.Stream",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Streams",
            "file": "samsara/streams/Stream.js",
            "line": 20,
            "description": "Stream listens to `resize`, `start`, `update` and `end` events and\n emits `start`, `update` and `end` events. `Resize` events get\n unified with `start`, `update`, and `end` events depending on\n when they are fired within Samsara's engine cycle.\n\n If listening to multiple sources, Stream emits a single event per\n Engine cycle.",
            "example": [
                "\n\n     var position = new Transitionable([0,0]);\n     var size = new EventEmitter();\n\n     var translationStream = Stream.lift(function(position, size){\n         var translation = [\n             position[0] + size[0],\n             position[1] + size[1]\n         ];\n\n         return Transform.translate(translation);\n     }, [positionStream, sizeStream]);\n\n     translationStream.on('start', function(transform){\n         console.log(transform);\n     });\n\n     translationStream.on('update', function(transform){\n         console.log(transform);\n     });\n\n     translationStream.on('end', function(transform){\n         console.log(transform);\n     });\n\n     position.set([100, 50], {duration : 500});\n     size.emit('resize', [100,100]);"
            ],
            "extends": "Streams.SimpleStream",
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "start",
                            "description": "Custom logic to map the `start` event",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "update",
                            "description": "Custom logic to map the `update` event",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "end",
                            "description": "Custom logic to map the `end` event",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "is_constructor": 1
        },
        "Transitions.Inertia": {
            "name": "Transitions.Inertia",
            "shortname": "Transitions.Inertia",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Transitions",
            "file": "samsara/transitions/Inertia.js",
            "line": 10,
            "description": "Defines an inertial transition, which decreases",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "Initial value",
                    "type": "Number"
                },
                {
                    "name": "velocity",
                    "description": "Initial velocity",
                    "type": "Number"
                }
            ]
        },
        "Transitions.Spring": {
            "name": "Transitions.Spring",
            "shortname": "Transitions.Spring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Transitions",
            "file": "samsara/transitions/Spring.js",
            "line": 11,
            "description": "A method of interpolating between start and end values with\n a spring transition.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "Initial value",
                    "type": "Number"
                },
                {
                    "name": "velocity",
                    "description": "Initial velocity",
                    "type": "Number"
                }
            ]
        },
        "Transitions.Tween": {
            "name": "Transitions.Tween",
            "shortname": "Transitions.Tween",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "Transitions",
            "file": "samsara/transitions/Tween.js",
            "line": 11,
            "description": "A method of interpolating between start and end values with\n an easing curve.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "value",
                    "description": "Initial value",
                    "type": "Number"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "samsara/core/algebras/layout.js",
            "line": 13,
            "description": "Defines the rules for composing layout specs: transform, align, origin and opacity.\n Transform is multiplied by the parent's transform (matrix multiplication).\n Align is a proportional offset relative to the parent size.\n Origin is a proportional offset relative to the current size.\n Opacity is multiplied by the parent's opacity.",
            "itemtype": "method",
            "name": "compose",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "spec",
                    "description": "Object layout spec",
                    "type": "Object"
                },
                {
                    "name": "parentSpec",
                    "description": "Parent layout spec",
                    "type": "Object"
                },
                {
                    "name": "size",
                    "description": "Object size",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The composed layout spec",
                "type": "Object"
            },
            "class": "RenderTreeNode"
        },
        {
            "file": "samsara/core/algebras/size.js",
            "line": 5,
            "description": "Defines the rules for composing size specs (size, margin, proportions) into a new size.\n A margin array reduces the parent size by an amount specified in pixels.\n A proportions array scales the parent size by a provided ratio.\n A size array [width, height] can take `true`, `undefined`, or numeric values.\n     `undefined` takes the parent value\n     `true` takes the value defined by the DOM\n     numeric values override parent values",
            "itemtype": "method",
            "name": "compose",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "spec",
                    "description": "Object size spec",
                    "type": "Object"
                },
                {
                    "name": "parentSize",
                    "description": "Parent size",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "size           Composed size",
                "type": "Object"
            },
            "class": "RenderTreeNode"
        },
        {
            "file": "samsara/core/nodes/RenderTreeNode.js",
            "line": 39,
            "description": "Extends the render tree with a new node. Similar to how a tree data structure\n is created, but instead of a node with an array of children, children subscribe\n to notifications from the parent.\n\n Nodes can be instances of `LayoutNode`, `SizeNode`, or Object literals with\n size and layout properties, in which case, appropriate nodes will be created.\n\n This method also takes `Views` (subtrees) and `Surfaces` (leaves).",
            "itemtype": "method",
            "name": "add",
            "chainable": 1,
            "params": [
                {
                    "name": "node",
                    "description": "Node",
                    "type": "Object|SizeNode|LayoutNode|Surface|View"
                }
            ],
            "return": {
                "description": "",
                "type": "RenderTreeNode"
            },
            "class": "RenderTreeNode"
        },
        {
            "file": "samsara/core/nodes/RootNode.js",
            "line": 26,
            "description": "Define an allocator",
            "itemtype": "method",
            "name": "setAllocator",
            "params": [
                {
                    "name": "allocator",
                    "description": "Allocator",
                    "type": "Allocator"
                }
            ],
            "class": "RootNode"
        },
        {
            "file": "samsara/core/queues/dirtyQueue.js",
            "line": 4,
            "description": "Queue that batches `end` and `dirty` events.\n This queue is traversed after the `postTickQueue` by the Engine.",
            "access": "private",
            "tagname": "",
            "class": "Core.Controller"
        },
        {
            "file": "samsara/core/queues/postTickQueue.js",
            "line": 4,
            "description": "Queue that batches `update` events.\n This queue is traversed after the `preTickQueue` but before `dirtQueue`\n by the Engine.",
            "access": "private",
            "tagname": "",
            "class": "Core.Controller"
        },
        {
            "file": "samsara/core/queues/preTickQueue.js",
            "line": 4,
            "description": "Queue that batches `start` events.\n This queue is traversed first (but after DOM events are executed) by the Engine.",
            "access": "private",
            "tagname": "",
            "class": "Core.Controller"
        },
        {
            "file": "samsara/core/queues/tickQueue.js",
            "line": 4,
            "description": "This queue is executed before the postTickQueue and after the preTickQueue.\n however, it differs in that the Engine does not clear the queue.\n This must be done manually.",
            "access": "private",
            "tagname": "",
            "class": "Core.Controller"
        },
        {
            "file": "samsara/core/Controller.js",
            "line": 74,
            "description": "Overwrite the DEFAULT_OPTIONS dictionary on the constructor of the class you wish to extend\n with the Controller to patch any options that are not prescribed on instantiation.",
            "itemtype": "attribute",
            "name": "DEFAULT_OPTIONS",
            "readonly": "",
            "class": "Core.Controller",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Controller.js",
            "line": 83,
            "description": "Overwrite the EVENTS dictionary on the constructor of the class you wish to extend\n with the Controller to include events in {key : value} pairs where the keys are\n event channel names and the values are functions to be executed.",
            "itemtype": "attribute",
            "name": "EVENTS",
            "readonly": "",
            "class": "Core.Controller",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Controller.js",
            "line": 93,
            "description": "Options getter.",
            "itemtype": "method",
            "name": "getOptions",
            "params": [
                {
                    "name": "key",
                    "description": "Key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "object   Options value for the key",
                "type": "Object"
            },
            "class": "Core.Controller",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Controller.js",
            "line": 104,
            "description": "Options setter.",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object"
                }
            ],
            "class": "Core.Controller",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Controller.js",
            "line": 176,
            "description": "Allows a class to extend Controller.\n Note: this is a method defined on the Controller constructor",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "protoObj",
                    "description": "Prototype properties of the extended class",
                    "type": "Object"
                },
                {
                    "name": "constants",
                    "description": "Constants to be added to the extended class's constructor",
                    "type": "Object"
                }
            ],
            "class": "Core.Controller",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/ElementAllocator.js",
            "line": 32,
            "description": "Move the DOM elements from their original container to a new one.",
            "itemtype": "method",
            "name": "migrate",
            "params": [
                {
                    "name": "container",
                    "description": "DOM element",
                    "type": "Node"
                }
            ],
            "class": "Core.ElementAllocator",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/ElementAllocator.js",
            "line": 51,
            "description": "Allocate an element of specified type from the pool.",
            "itemtype": "method",
            "name": "allocate",
            "params": [
                {
                    "name": "type",
                    "description": "DOM tagName, e.g., \"div\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "Core.ElementAllocator",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/ElementAllocator.js",
            "line": 71,
            "description": "De-allocate an element of specified type to the pool for recycling.",
            "itemtype": "method",
            "name": "deallocate",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element",
                    "type": "Node"
                }
            ],
            "class": "Core.ElementAllocator",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/ElementOutput.js",
            "line": 179,
            "description": "Adds a handler to the `type` channel which will be executed on `emit`.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "DOM event channel name, e.g., \"click\", \"touchmove\"",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Handler. It's only argument will be an emitted data payload.",
                    "type": "Function"
                }
            ],
            "class": "Core.ElementOutput",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/ElementOutput.js",
            "line": 193,
            "description": "Removes a previously added handler to the `type` channel.\n Undoes the work of `on`.",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "type",
                    "description": "DOM event channel name e.g., \"click\", \"touchmove\"",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Handler",
                    "type": "Function"
                }
            ],
            "class": "Core.ElementOutput",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/ElementOutput.js",
            "line": 205,
            "description": "Emit an event with optional data payload. This will execute all listening\n to the channel name with the payload as only argument.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "Event channel name",
                    "type": "String"
                },
                {
                    "name": "payload",
                    "description": "User defined data payload",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Core.ElementOutput",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/ElementOutput.js",
            "line": 217,
            "description": "Assigns the DOM element for committing and to and attaches event listeners.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "attach",
            "params": [
                {
                    "name": "target",
                    "description": "document parent of this container",
                    "type": "Node"
                }
            ],
            "class": "Core.ElementOutput",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/ElementOutput.js",
            "line": 229,
            "description": "Removes the associated DOM element in memory and detached event listeners.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "detach",
            "class": "Core.ElementOutput",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Engine.js",
            "line": 28,
            "description": "Updates by a single frame of the application by looping through all function queues.\n This is repeatedly called within a requestAnimationFrame loop until the application\n is receiving no layout changes. At this point the requestAnimationFrame will be\n canceled until the next change.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "step",
            "class": "Core.Engine",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Engine.js",
            "line": 56,
            "description": "Initiate the Engine's request animation frame loop.",
            "itemtype": "method",
            "name": "start",
            "static": 1,
            "class": "Core.Engine",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Engine.js",
            "line": 67,
            "description": "Stop the Engine's request animation frame loop.",
            "itemtype": "method",
            "name": "stop",
            "static": 1,
            "class": "Core.Engine",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/LayoutNode.js",
            "line": 58,
            "description": "Introduce new data streams to the layout node in {key : value} pairs.\n Here the `key` is one of \"transform\", \"origin\", \"align\" or \"opacity\".\n The `value` is either a stream, or a simple type like a `Number` or `Array`.\n Simple types will be wrapped in an `Observerable` to emit appropriate events.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "sources",
                    "description": "Object of data sources",
                    "type": "Object"
                }
            ],
            "class": "Core.LayoutNode",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/OptionsManager.js",
            "line": 33,
            "description": "Constructor method. Create OptionsManager from source dictionary with arguments overriden by patch dictionary.",
            "itemtype": "method",
            "name": "OptionsManager.patch",
            "params": [
                {
                    "name": "options",
                    "description": "Options to be patched",
                    "type": "Object"
                },
                {
                    "name": "patch",
                    "description": "Options to overwrite",
                    "type": "...Object"
                }
            ],
            "return": {
                "description": "source",
                "type": "Object"
            },
            "class": "Core.OptionsManager",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/OptionsManager.js",
            "line": 47,
            "description": "Constructor method. Convenience method to set options with defaults on an object instance.",
            "itemtype": "method",
            "name": "OptionsManager.patch",
            "params": [
                {
                    "name": "options",
                    "description": "Options to be patched",
                    "type": "Object"
                },
                {
                    "name": "overrides",
                    "description": "Options to overwrite",
                    "type": "...Object"
                }
            ],
            "return": {
                "description": "source",
                "type": "Object"
            },
            "class": "Core.OptionsManager",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/OptionsManager.js",
            "line": 68,
            "description": "Patch options with provided patches. Triggers `change` event on the object.",
            "itemtype": "method",
            "name": "patch",
            "params": [
                {
                    "name": "options",
                    "description": "Patch options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "this",
                "type": "OptionsManager"
            },
            "class": "Core.OptionsManager",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/OptionsManager.js",
            "line": 88,
            "description": "Alias for patch",
            "itemtype": "method",
            "name": "setOptions",
            "class": "Core.OptionsManager",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/OptionsManager.js",
            "line": 95,
            "description": "Return OptionsManager based on sub-object retrieved by `key`.",
            "itemtype": "method",
            "name": "key",
            "params": [
                {
                    "name": "key",
                    "description": "Key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value",
                "type": "OptionsManager"
            },
            "class": "Core.OptionsManager",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/OptionsManager.js",
            "line": 108,
            "description": "Look up options value by key or get the full options hash.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "Key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Associated object or full options hash",
                "type": "Object"
            },
            "class": "Core.OptionsManager",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/OptionsManager.js",
            "line": 119,
            "description": "Alias for get",
            "itemtype": "method",
            "name": "getOptions",
            "class": "Core.OptionsManager",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/OptionsManager.js",
            "line": 126,
            "description": "Set key to value. Outputs `change` event if a value is overwritten.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "Key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Updated OptionsManager",
                "type": "OptionsManager"
            },
            "class": "Core.OptionsManager",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/OptionsManager.js",
            "line": 141,
            "description": "Adds a handler to the `type` channel which will be executed on `emit`.",
            "itemtype": "method",
            "name": "\"on\"",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "Core.OptionsManager",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/OptionsManager.js",
            "line": 153,
            "description": "Removes the `handler` from the `type` channel.\n  This undoes the work of `on`.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "Core.OptionsManager",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/SizeNode.js",
            "line": 75,
            "description": "Introduce new data streams to the size node in {key : value} pairs.\n Here the `key` is one of \"size\", \"proportions\" or \"marins\".\n The `value` is either a stream, or a simple type like a `Number` or `Array`.\n Simple types will be wrapped in an `Observerable` to emit appropriate events.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "obj",
                    "description": "Object of data sources",
                    "type": "Object"
                }
            ],
            "class": "Core.SizeNode",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Timer.js",
            "line": 58,
            "description": "Wraps a function to be invoked after a certain amount of time.\n After a set duration has passed, it executes the function.",
            "itemtype": "method",
            "name": "setTimeout",
            "static": 1,
            "params": [
                {
                    "name": "handler",
                    "description": "Function to be run after a specified duration",
                    "type": "Function"
                },
                {
                    "name": "duration",
                    "description": "Time to delay execution (in milliseconds)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Core.Timer",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Timer.js",
            "line": 80,
            "description": "Wraps a function to be invoked at repeated intervals.",
            "itemtype": "method",
            "name": "setInterval",
            "static": 1,
            "params": [
                {
                    "name": "handler",
                    "description": "Function to be run at specified intervals",
                    "type": "Function"
                },
                {
                    "name": "interval",
                    "description": "Time interval (in milliseconds)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Core.Timer",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Timer.js",
            "line": 101,
            "description": "Wraps a function to be invoked after a specified number of Engine ticks.",
            "itemtype": "method",
            "name": "after",
            "static": 1,
            "params": [
                {
                    "name": "handler",
                    "description": "Function to be executed",
                    "type": "Function"
                },
                {
                    "name": "numTicks",
                    "description": "Number of frames to delay execution",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Core.Timer",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Timer.js",
            "line": 122,
            "description": "Wraps a function to be invoked every specified number of Engine ticks.",
            "itemtype": "method",
            "name": "every",
            "static": 1,
            "params": [
                {
                    "name": "handler",
                    "description": "Function to be executed",
                    "type": "Function"
                },
                {
                    "name": "numTicks",
                    "description": "Number of frames per execution",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Core.Timer",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Timer.js",
            "line": 144,
            "description": "Cancel a timer.",
            "itemtype": "method",
            "name": "clear",
            "static": 1,
            "params": [
                {
                    "name": "handler",
                    "description": "Handler",
                    "type": "Function"
                }
            ],
            "class": "Core.Timer",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Timer.js",
            "line": 155,
            "description": "Debounces a function for specified duration.",
            "itemtype": "method",
            "name": "debounce",
            "static": 1,
            "params": [
                {
                    "name": "handler",
                    "description": "Handler",
                    "type": "Function"
                },
                {
                    "name": "duration",
                    "description": "Duration",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Core.Timer",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Timer.js",
            "line": 180,
            "description": "Debounces a function for a specified number of Engine frames.",
            "itemtype": "method",
            "name": "frameDebounce",
            "static": 1,
            "params": [
                {
                    "name": "handler",
                    "description": "Handler",
                    "type": "Function"
                },
                {
                    "name": "numFrames",
                    "description": "Number of frames",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Core.Timer",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 57,
            "description": "Identity transform.",
            "itemtype": "property",
            "name": "identity",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 67,
            "description": "Transform for moving a renderable in front of another renderable in the z-direction.",
            "itemtype": "property",
            "name": "inFront",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 76,
            "description": "Transform for moving a renderable behind another renderable in the z-direction.",
            "itemtype": "property",
            "name": "behind",
            "type": "Array",
            "static": 1,
            "final": 1,
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 85,
            "description": "Compose Transform arrays via matrix multiplication.",
            "itemtype": "method",
            "name": "compose",
            "static": 1,
            "params": [
                {
                    "name": "t1",
                    "description": "Left Transform",
                    "type": "Transform"
                },
                {
                    "name": "t2",
                    "description": "Right Transform",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 117,
            "description": "Convenience method to Compose several Transform arrays.",
            "itemtype": "method",
            "name": "composeMany",
            "static": 1,
            "params": [
                {
                    "name": "Transform",
                    "description": "arrays",
                    "type": "...Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 136,
            "description": "Translate a Transform after the Transform is applied.",
            "itemtype": "method",
            "name": "thenMove",
            "static": 1,
            "params": [
                {
                    "name": "t",
                    "description": "Transform",
                    "type": "Transform"
                },
                {
                    "name": "v",
                    "description": "Array of [x,y,z] translation components",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 150,
            "description": "Translate a Transform before the Transform is applied.",
            "itemtype": "method",
            "name": "moveThen",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "Array of [x,y,z] translation components",
                    "type": "Number[]"
                },
                {
                    "name": "t",
                    "description": "Transform",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 167,
            "description": "Return a Transform which represents translation by a translation vector.",
            "itemtype": "method",
            "name": "translate",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "Translation vector [x,y,z]",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 182,
            "description": "Return a Transform which represents translation in the x-direction.",
            "itemtype": "method",
            "name": "translateX",
            "static": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Translation amount",
                    "type": "Number"
                }
            ],
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 193,
            "description": "Return a Transform which represents translation in the y-direction.",
            "itemtype": "method",
            "name": "translateY",
            "static": 1,
            "params": [
                {
                    "name": "y",
                    "description": "Translation amount",
                    "type": "Number"
                }
            ],
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 204,
            "description": "Return a Transform which represents translation in the z-direction.",
            "itemtype": "method",
            "name": "translateZ",
            "static": 1,
            "params": [
                {
                    "name": "z",
                    "description": "Translation amount",
                    "type": "Number"
                }
            ],
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 215,
            "description": "Return a Transform which represents a scaling by specified amounts in each dimension.",
            "itemtype": "method",
            "name": "scale",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "Scale vector [x,y,z]",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 230,
            "description": "Return a Transform which represents scaling in the x-direction.",
            "itemtype": "method",
            "name": "scaleX",
            "static": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Scale amount",
                    "type": "Number"
                }
            ],
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 241,
            "description": "Return a Transform which represents scaling in the y-direction.",
            "itemtype": "method",
            "name": "scaleY",
            "static": 1,
            "params": [
                {
                    "name": "y",
                    "description": "Scale amount",
                    "type": "Number"
                }
            ],
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 252,
            "description": "Return a Transform which represents scaling in the z-direction.",
            "itemtype": "method",
            "name": "scaleZ",
            "static": 1,
            "params": [
                {
                    "name": "z",
                    "description": "Scale amount",
                    "type": "Number"
                }
            ],
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 263,
            "description": "Scale a Transform after the Transform is applied.",
            "itemtype": "method",
            "name": "thenScale",
            "static": 1,
            "params": [
                {
                    "name": "t",
                    "description": "Transform",
                    "type": "Transform"
                },
                {
                    "name": "v",
                    "description": "Array of [x,y,z] scale components",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 284,
            "description": "Return a Transform representing a clockwise rotation around the x-axis.",
            "itemtype": "method",
            "name": "rotateX",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "Angle in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 298,
            "description": "Return a Transform representing a clockwise rotation around the y-axis.",
            "itemtype": "method",
            "name": "rotateY",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "Angle in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 312,
            "description": "Return a Transform representing a clockwise rotation around the z-axis.",
            "itemtype": "method",
            "name": "rotateX",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "Angle in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 326,
            "description": "Return a Transform representation of a skew in the x-direction",
            "itemtype": "method",
            "name": "skewX",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "The angle between the top and left sides",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 338,
            "description": "Return a Transform representation of a skew in the y-direction",
            "itemtype": "method",
            "name": "skewY",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "The angle between the bottom and right sides",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 350,
            "description": "Return a Transform which represents an axis-angle rotation.",
            "itemtype": "method",
            "name": "rotateAxis",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "Unit vector representing the axis to rotate about",
                    "type": "Number[]"
                },
                {
                    "name": "angle",
                    "description": "Radians to rotate clockwise about the axis",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 382,
            "description": "Return a Transform which represents a Transform applied about an origin point.\n Useful for rotating and scaling relative to an origin.",
            "itemtype": "method",
            "name": "aboutOrigin",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "Origin point [x,y,z]",
                    "type": "Number[]"
                },
                {
                    "name": "t",
                    "description": "Transform",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 400,
            "description": "Returns a perspective Transform.",
            "itemtype": "method",
            "name": "perspective",
            "static": 1,
            "params": [
                {
                    "name": "focusZ",
                    "description": "z-depth of focal point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 412,
            "description": "Return translation vector component of the given Transform.",
            "itemtype": "method",
            "name": "getTranslate",
            "static": 1,
            "params": [
                {
                    "name": "t",
                    "description": "Transform",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Number[]"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 424,
            "description": "Return inverse Transform for given Transform.\n  Note: will provide incorrect results if Transform is not invertible.",
            "itemtype": "method",
            "name": "inverse",
            "static": 1,
            "params": [
                {
                    "name": "t",
                    "description": "Transform",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 458,
            "description": "Returns the transpose of a Transform.",
            "itemtype": "method",
            "name": "transpose",
            "static": 1,
            "params": [
                {
                    "name": "t",
                    "description": "Transform",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 482,
            "description": "Decompose Transform into separate `translate`, `rotate`, `scale` and `skew` components.",
            "itemtype": "method",
            "name": "interpret",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "t",
                    "description": "Transform",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 585,
            "description": "Compose .translate, .rotate, .scale and .skew components into a Transform matrix.\n The \"inverse\" of .interpret.",
            "itemtype": "method",
            "name": "build",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "spec",
                    "description": "Object with keys \"translate, rotate, scale, skew\" and their vector values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 605,
            "description": "Weighted average between two matrices by averaging their\n translation, rotation, scale, skew components.\n f(M1,M2,t) = (1 - t) * M1 + t * M2",
            "itemtype": "method",
            "name": "average",
            "static": 1,
            "params": [
                {
                    "name": "M1",
                    "description": "M1 = f(M1,M2,0) Transform",
                    "type": "Transform"
                },
                {
                    "name": "M2",
                    "description": "M2 = f(M1,M2,1) Transform",
                    "type": "Transform"
                },
                {
                    "name": "t",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1/2"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 639,
            "description": "Determine if two Transforms are component-wise equal.",
            "itemtype": "method",
            "name": "equals",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "Transform",
                    "type": "Transform"
                },
                {
                    "name": "b",
                    "description": "Transform",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transform.js",
            "line": 652,
            "description": "Determine if two Transforms are component-wise unequal",
            "itemtype": "method",
            "name": "notEquals",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "Transform",
                    "type": "Transform"
                },
                {
                    "name": "b",
                    "description": "Transform",
                    "type": "Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Core.Transform",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 118,
            "description": "Constructor method. A way of registering other engines that can interpolate\n between start and end values. For instance, a physics engine.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "name",
                    "description": "Identifier for the engine",
                    "type": "String"
                },
                {
                    "name": "constructor",
                    "description": "Constructor for the engine"
                }
            ],
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 131,
            "description": "Constructor method. Unregister an interpolating engine.\n Undoes work of `register`.",
            "itemtype": "method",
            "name": "unregister",
            "params": [
                {
                    "name": "name",
                    "description": "Identifier for the engine",
                    "type": "String"
                }
            ],
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 146,
            "description": "Define a new end value that will be transitioned towards with the prescribed\n transition. An optional callback can fire when the transition completes.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": "End value",
                    "type": "Number|Number[]"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "curve",
                            "description": "Easing curve name, e.g., \"easeIn\"",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "Duration of transition",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 208,
            "description": "Return the current state of the transition.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "Current state",
                "type": "Number|Number[]"
            },
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 218,
            "description": "Return the current velocity of the transition.",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "Current state",
                "type": "Number|Number[]"
            },
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 228,
            "description": "Sets the value and velocity of the transition without firing any events.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "value",
                    "description": "New value",
                    "type": "Number|Number[]"
                },
                {
                    "name": "velocity",
                    "description": "New velocity",
                    "type": "Number|Number[]",
                    "optional": true
                }
            ],
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 243,
            "description": "Ends the transition in place.",
            "itemtype": "method",
            "name": "halt",
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 263,
            "description": "Determine is the transition is ongoing, or has completed.",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 273,
            "description": "Combine multiple transitions to be executed sequentially. Pass an optional\n callback to fire on completion. Provide the transitions as an array of\n transition definition pairs: [value, method]",
            "example": [
                "\n\n transitionable.setMany([\n     [0, {curve : 'easeOut', duration : 500}],\n     [1, {curve : 'spring', period : 100, damping : 0.5}]\n ]);"
            ],
            "itemtype": "method",
            "name": "setMany",
            "params": [
                {
                    "name": "transitions",
                    "description": "Array of transitions",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 297,
            "description": "Loop indefinitely between values with provided transitions array.",
            "example": [
                "\n\n transitionable.loop([\n     [0, {curve : 'easeOut', duration : 500}],\n     [1, {curve : 'spring', period : 100, damping : 0.5}]\n ]);"
            ],
            "itemtype": "method",
            "name": "loop",
            "params": [
                {
                    "name": "transitions",
                    "description": "Array of transitions",
                    "type": "Array"
                }
            ],
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/Transitionable.js",
            "line": 315,
            "description": "Postpone a transition, and fire it by providing it in the callback parameter.",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback",
                    "type": "Function"
                },
                {
                    "name": "duration",
                    "description": "Duration of delay (in millisecons)",
                    "type": "Number"
                }
            ],
            "class": "Core.Transitionable",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/View.js",
            "line": 115,
            "description": "Extends the render tree subtree with a new node.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "object",
                    "description": "Node",
                    "type": "SizeNode|LayoutNode|Surface"
                }
            ],
            "return": {
                "description": "",
                "type": "RenderTreeNode"
            },
            "class": "Core.View",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/View.js",
            "line": 125,
            "description": "Getter for size.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "size",
                "type": "Number[]"
            },
            "class": "Core.View",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/View.js",
            "line": 134,
            "description": "Setter for size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "Size as [width, height] in pixels, or a stream.",
                    "type": "Number[]|Stream"
                }
            ],
            "class": "Core.View",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/View.js",
            "line": 143,
            "description": "Setter for proportions.",
            "itemtype": "method",
            "name": "setProportions",
            "params": [
                {
                    "name": "proportions",
                    "description": "Proportions as [x,y], or a stream.",
                    "type": "Number[]|Stream"
                }
            ],
            "class": "Core.View",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/View.js",
            "line": 152,
            "description": "Setter for proportions.",
            "itemtype": "method",
            "name": "setProportions",
            "params": [
                {
                    "name": "proportions",
                    "description": "Proportions as [x,y], or a stream.",
                    "type": "Number[]|Stream"
                }
            ],
            "class": "Core.View",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/View.js",
            "line": 161,
            "description": "Setter for origin.",
            "itemtype": "method",
            "name": "setOrigin",
            "params": [
                {
                    "name": "origin",
                    "description": "Origin as [x,y], or a stream.",
                    "type": "Number[]|Stream"
                }
            ],
            "class": "Core.View",
            "namespace": "Core"
        },
        {
            "file": "samsara/core/View.js",
            "line": 170,
            "description": "Setter for opacity.",
            "itemtype": "method",
            "name": "setOpacity",
            "params": [
                {
                    "name": "opacity",
                    "description": "Opacity",
                    "type": "Number|Stream"
                }
            ],
            "class": "Core.View",
            "namespace": "Core"
        },
        {
            "file": "samsara/dom/ContainerSurface.js",
            "line": 65,
            "description": "Get current perspective in pixels.",
            "itemtype": "method",
            "name": "getPerspective",
            "return": {
                "description": "Perspective in pixels",
                "type": "Number"
            },
            "class": "DOM.ContainerSurface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/ContainerSurface.js",
            "line": 75,
            "description": "Set current perspective in pixels.",
            "itemtype": "method",
            "name": "setPerspective",
            "params": [
                {
                    "name": "perspective",
                    "description": "Perspective in pixels",
                    "type": "Number"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback executed on completion of transition",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "DOM.ContainerSurface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/ContainerSurface.js",
            "line": 87,
            "description": "Extends the render tree with a provided node.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "node",
                    "description": "Node, Surface, or View",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "RenderTreeNode"
            },
            "class": "DOM.ContainerSurface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Context.js",
            "line": 119,
            "description": "Extends the render tree beginning with the Context's RootNode with a new node.\n Delegates to RootNode's `add` method.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "Renderable",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Wrapped node",
                "type": "RenderTreeNode"
            },
            "class": "DOM.Context",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Context.js",
            "line": 132,
            "description": "Get current perspective of this Context in pixels.",
            "itemtype": "method",
            "name": "getPerspective",
            "return": {
                "description": "Perspective in pixels",
                "type": "Number"
            },
            "class": "DOM.Context",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Context.js",
            "line": 142,
            "description": "Set current perspective of the `context` in pixels.",
            "itemtype": "method",
            "name": "setPerspective",
            "params": [
                {
                    "name": "perspective",
                    "description": "Perspective in pixels",
                    "type": "Number"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback executed on completion of transition",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "DOM.Context",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Context.js",
            "line": 154,
            "description": "Set current perspective of the `context` in pixels.",
            "itemtype": "method",
            "name": "setPerspective",
            "params": [
                {
                    "name": "perspective",
                    "description": "Perspective in pixels",
                    "type": "Number"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback executed on completion of transition",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "DOM.Context",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Context.js",
            "line": 166,
            "description": "Allocate contents of the `context` to a DOM node.",
            "itemtype": "method",
            "name": "mount",
            "params": [
                {
                    "name": "node",
                    "description": "DOM element",
                    "type": "Node"
                }
            ],
            "class": "DOM.Context",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Context.js",
            "line": 201,
            "description": "Adds a handler to the `type` channel which will be executed on `emit`.\n These events should be DOM events that occur on the DOM node the\n context has been mounted to.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "DOM.Context",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Context.js",
            "line": 221,
            "description": "Removes the `handler` from the `type`.\n Undoes the work of `on`.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "DOM.Context",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Context.js",
            "line": 233,
            "description": "Used internally when context is subscribed to.",
            "itemtype": "method",
            "name": "emit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Payload",
                    "type": "Object"
                }
            ],
            "class": "DOM.Context",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 181,
            "description": "Setter for HTML attributes.",
            "itemtype": "method",
            "name": "setAttributes",
            "chainable": 1,
            "params": [
                {
                    "name": "attributes",
                    "description": "HTML Attributes",
                    "type": "Object"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 198,
            "description": "Getter for HTML attributes.",
            "itemtype": "method",
            "name": "getAttributes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 208,
            "description": "Setter for CSS properties.\n Note: properties are camelCased, not hyphenated.",
            "itemtype": "method",
            "name": "setProperties",
            "chainable": 1,
            "params": [
                {
                    "name": "properties",
                    "description": "CSS properties",
                    "type": "Object"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 224,
            "description": "Getter for CSS properties.",
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "Dictionary of this Surface's properties.",
                "type": "Object"
            },
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 234,
            "description": "Add CSS class to the list of classes on this Surface.",
            "itemtype": "method",
            "name": "addClass",
            "chainable": 1,
            "params": [
                {
                    "name": "className",
                    "description": "Class name",
                    "type": "String"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 250,
            "description": "Remove CSS class from the list of classes on this Surface.",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "className",
                    "description": "Class name",
                    "type": "String"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 265,
            "description": "Toggle CSS class for this Surface.",
            "itemtype": "method",
            "name": "toggleClass",
            "params": [
                {
                    "name": "className",
                    "description": "Class name",
                    "type": "String"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 278,
            "description": "Reset classlist.",
            "itemtype": "method",
            "name": "setClasses",
            "chainable": 1,
            "params": [
                {
                    "name": "classlist",
                    "description": "ClassList",
                    "type": "String[]"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 297,
            "description": "Get array of CSS classes attached to this Surface.",
            "itemtype": "method",
            "name": "getClasslist",
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 307,
            "description": "Set or overwrite innerHTML content of this Surface.",
            "itemtype": "method",
            "name": "setContent",
            "chainable": 1,
            "params": [
                {
                    "name": "content",
                    "description": "HTML content",
                    "type": "String|DocumentFragment"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 323,
            "description": "Return innerHTML content of this Surface.",
            "itemtype": "method",
            "name": "getContent",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 333,
            "description": "Set options for this surface",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "Overrides for default options. See constructor.",
                    "type": "Object"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 355,
            "description": "Allocates the element-type associated with the Surface, adds its given\n element classes, and prepares it for future committing.\n\n This method is called upon the first `start` or `resize`\n event the Surface gets.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "allocator",
                    "description": "Allocator",
                    "type": "ElementAllocator"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 389,
            "description": "Remove all Samsara-relevant data from the Surface.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "allocator",
                    "description": "Allocator",
                    "type": "ElementAllocator"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 434,
            "description": "Insert the Surface's content into the currentTarget.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deploy",
            "params": [
                {
                    "name": "target",
                    "description": "DOM element to set content into",
                    "type": "Node"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 455,
            "description": "Cache the content of the Surface in a document fragment for future deployment.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recall",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Node"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 469,
            "description": "Getter for size.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "",
                "type": "Number[]"
            },
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 480,
            "description": "Setter for size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "size",
                    "description": "Size as [width, height] in pixels, or a stream.",
                    "type": "Number[]|Stream"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 492,
            "description": "Setter for proportions.",
            "itemtype": "method",
            "name": "setProportions",
            "params": [
                {
                    "name": "proportions",
                    "description": "Proportions as [x,y], or a stream.",
                    "type": "Number[]|Stream"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 503,
            "description": "Setter for margins.",
            "itemtype": "method",
            "name": "setMargins",
            "params": [
                {
                    "name": "margins",
                    "description": "Margins as [width, height] in pixels, or a stream.",
                    "type": "Number[]|Stream"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 514,
            "description": "Setter for aspect ratio. If only one of width or height is specified,\n the aspect ratio will replace the unspecified dimension by scaling\n the specified dimension by the value provided.",
            "itemtype": "method",
            "name": "setAspectRatio",
            "params": [
                {
                    "name": "aspectRatio",
                    "description": "Aspect ratio.",
                    "type": "Number|Stream"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 527,
            "description": "Setter for origin.",
            "itemtype": "method",
            "name": "setOrigin",
            "params": [
                {
                    "name": "origin",
                    "description": "Origin as [x,y], or a stream.",
                    "type": "Number[]|Stream"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/dom/Surface.js",
            "line": 539,
            "description": "Setter for opacity.",
            "itemtype": "method",
            "name": "setOpacity",
            "params": [
                {
                    "name": "opacity",
                    "description": "Opacity",
                    "type": "Number"
                }
            ],
            "class": "DOM.Surface",
            "namespace": "DOM"
        },
        {
            "file": "samsara/events/EventEmitter.js",
            "line": 35,
            "description": "Broadcast an event on the `type` channel with an optional payload. This will call the handlers\n of all EventEmitters listening on the `type` channel with the (optional) data payload\n as its argument.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Payload",
                    "type": "Object"
                }
            ],
            "class": "Events.EventEmitter",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventEmitter.js",
            "line": 54,
            "description": "Alias for emit.",
            "itemtype": "method",
            "name": "trigger",
            "class": "Events.EventEmitter",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventEmitter.js",
            "line": 61,
            "description": "Adds a handler to the `type` channel which will be executed on `emit`.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "Events.EventEmitter",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventEmitter.js",
            "line": 73,
            "description": "Behaves like `EventEmitter.prototype.on`, except the handler is only executed once.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name (e.g., 'click')",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Callback",
                    "type": "Function"
                }
            ],
            "class": "Events.EventEmitter",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventEmitter.js",
            "line": 88,
            "description": "Removes the `handler` from the `type` channel. This undoes the work of `on`.\n If no type is provided, then all event listeners are removed.\n If a type is provided but no handler, then all listeners of that type are removed.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "handler",
                    "description": "Callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Events.EventEmitter",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventEmitter.js",
            "line": 113,
            "description": "A convenience method to bind the provided object to all added handlers.",
            "itemtype": "method",
            "name": "bindThis",
            "params": [
                {
                    "name": "owner",
                    "description": "Bound `this` context",
                    "type": "Object"
                }
            ],
            "class": "Events.EventEmitter",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventFilter.js",
            "line": 48,
            "description": "Emit event if the condition is satisfied.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Payload",
                    "type": "Object"
                }
            ],
            "class": "Events.EventFilter",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventFilter.js",
            "line": 61,
            "description": "Alias of emit.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Payload",
                    "type": "Object"
                }
            ],
            "class": "Events.EventFilter",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventHandler.js",
            "line": 47,
            "description": "Constructor helper method. Assign an event handler to receive an object's input events.\n Defines `trigger`, `subscribe` and `unsubscribe` methods on the class instance.",
            "itemtype": "method",
            "name": "setInputHandler",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "Class instance",
                    "type": "Object"
                },
                {
                    "name": "handler",
                    "description": "EventHandler representing an input source",
                    "type": "EventHandler"
                }
            ],
            "class": "Events.EventHandler",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventHandler.js",
            "line": 62,
            "description": "Constructor helper method. Assign an event handler to emit an object's output events.\n Defines `emit`, `on` and `off` methods on the class instance.",
            "itemtype": "method",
            "name": "setOutputHandler",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "Object to provide on, off and emit methods",
                    "type": "Object"
                },
                {
                    "name": "handler",
                    "description": "Handler assigned event handler",
                    "type": "EventHandler"
                }
            ],
            "class": "Events.EventHandler",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventHandler.js",
            "line": 78,
            "description": "Constructor helper method. Given an events dictionary of {eventName : handler} pairs, attach them to\n a provided input handler for an object.",
            "itemtype": "method",
            "name": "setInputEvents",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "Object to provide on, off and emit methods",
                    "type": "Object"
                },
                {
                    "name": "handler",
                    "description": "Handler assigned event handler",
                    "type": "EventHandler"
                }
            ],
            "class": "Events.EventHandler",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventHandler.js",
            "line": 98,
            "description": "Adds a handler to the `type` channel which will be executed on `emit`.\n Extends EventEmitter's `on` method.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "Event channel name",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Handler",
                    "type": "Function"
                }
            ],
            "class": "Events.EventHandler",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventHandler.js",
            "line": 117,
            "description": "Listen for events from an an upstream source.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "source",
                    "description": "Event source",
                    "type": "EventEmitter"
                }
            ],
            "class": "Events.EventHandler",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventHandler.js",
            "line": 134,
            "description": "Stop listening to events from an upstream source.\n Undoes work of `subscribe`.",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "source",
                    "description": "Event source",
                    "type": "EventEmitter"
                }
            ],
            "class": "Events.EventHandler",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventMapper.js",
            "line": 41,
            "description": "Emit mapped event.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Payload",
                    "type": "Object"
                }
            ],
            "class": "Events.EventMapper",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventMapper.js",
            "line": 53,
            "description": "Alias of emit.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Payload",
                    "type": "Object"
                }
            ],
            "class": "Events.EventMapper",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventSplitter.js",
            "line": 56,
            "description": "Emit event.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Payload",
                    "type": "Object"
                }
            ],
            "class": "Events.EventSplitter",
            "namespace": "Events"
        },
        {
            "file": "samsara/events/EventSplitter.js",
            "line": 69,
            "description": "Alias of emit.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "Channel name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Payload",
                    "type": "Object"
                }
            ],
            "class": "Events.EventSplitter",
            "namespace": "Events"
        },
        {
            "file": "samsara/inputs/GenericInput.js",
            "line": 57,
            "description": "Constrain the input along a specific axis.",
            "itemtype": "property",
            "name": "DIRECTION",
            "type": "Object",
            "static": 1,
            "class": "Inputs.GenericInput",
            "namespace": "Inputs",
            "subprops": [
                {
                    "name": "X",
                    "description": "x-axis",
                    "type": "Number"
                },
                {
                    "name": "Y",
                    "description": "y-axis",
                    "type": "Number"
                }
            ]
        },
        {
            "file": "samsara/inputs/GenericInput.js",
            "line": 70,
            "description": "Register a global input class with an identifying key",
            "itemtype": "method",
            "name": "register",
            "static": 1,
            "params": [
                {
                    "name": "inputObject",
                    "description": "an object of {input key : input options} fields",
                    "type": "Object"
                }
            ],
            "class": "Inputs.GenericInput",
            "namespace": "Inputs"
        },
        {
            "file": "samsara/inputs/GenericInput.js",
            "line": 87,
            "description": "Helper to set options on all input instances",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "options object",
                    "type": "Object"
                }
            ],
            "class": "Inputs.GenericInput",
            "namespace": "Inputs"
        },
        {
            "file": "samsara/inputs/GenericInput.js",
            "line": 98,
            "description": "Subscribe events from an input class",
            "itemtype": "method",
            "name": "subscribeInput",
            "params": [
                {
                    "name": "key",
                    "description": "identifier for input class",
                    "type": "String"
                }
            ],
            "class": "Inputs.GenericInput",
            "namespace": "Inputs"
        },
        {
            "file": "samsara/inputs/GenericInput.js",
            "line": 110,
            "description": "Unsubscribe events from an input class",
            "itemtype": "method",
            "name": "unsubscribeInput",
            "params": [
                {
                    "name": "key",
                    "description": "identifier for input class",
                    "type": "String"
                }
            ],
            "class": "Inputs.GenericInput",
            "namespace": "Inputs"
        },
        {
            "file": "samsara/inputs/GenericInput.js",
            "line": 122,
            "description": "Get a registered input by key",
            "itemtype": "method",
            "name": "getInput",
            "params": [
                {
                    "name": "key",
                    "description": "Identifier for input class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Input"
            },
            "class": "Inputs.GenericInput",
            "namespace": "Inputs"
        },
        {
            "file": "samsara/inputs/GenericInput.js",
            "line": 139,
            "description": "Add an input class to from the registered classes",
            "itemtype": "method",
            "name": "addInput",
            "params": [
                {
                    "name": "inputs",
                    "description": "an array of registered input keys\n   or an object with fields {input key : input options}",
                    "type": "Object|Array.String"
                }
            ],
            "class": "Inputs.GenericInput",
            "namespace": "Inputs"
        },
        {
            "file": "samsara/inputs/MouseInput.js",
            "line": 114,
            "description": "Constrain the input along a specific axis.",
            "itemtype": "property",
            "name": "DIRECTION",
            "type": "Object",
            "static": 1,
            "class": "Inputs.MouseInput",
            "namespace": "Inputs",
            "subprops": [
                {
                    "name": "X",
                    "description": "x-axis",
                    "type": "Number"
                },
                {
                    "name": "Y",
                    "description": "y-axis",
                    "type": "Number"
                }
            ]
        },
        {
            "file": "samsara/inputs/ScrollInput.js",
            "line": 107,
            "description": "Constrain the input along a specific axis.",
            "itemtype": "property",
            "name": "DIRECTION",
            "type": "Object",
            "static": 1,
            "class": "Inputs.ScrollInput",
            "namespace": "Inputs",
            "subprops": [
                {
                    "name": "X",
                    "description": "x-axis",
                    "type": "Number"
                },
                {
                    "name": "Y",
                    "description": "y-axis",
                    "type": "Number"
                }
            ]
        },
        {
            "file": "samsara/inputs/TouchInput.js",
            "line": 106,
            "description": "Constrain the input along a specific axis.",
            "itemtype": "property",
            "name": "DIRECTION",
            "type": "Object",
            "static": 1,
            "class": "Inputs.TouchInput",
            "namespace": "Inputs",
            "subprops": [
                {
                    "name": "X",
                    "description": "x-axis",
                    "type": "Number"
                },
                {
                    "name": "Y",
                    "description": "y-axis",
                    "type": "Number"
                }
            ]
        },
        {
            "file": "samsara/inputs/TouchTracker.js",
            "line": 63,
            "description": "Record touch data, if selective is false.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "track",
            "params": [
                {
                    "name": "data",
                    "description": "touch data",
                    "type": "Object"
                }
            ],
            "class": "Inputs.TouchTracker",
            "namespace": "Inputs"
        },
        {
            "file": "samsara/inputs/TwoFingerInput.js",
            "line": 55,
            "description": "Calculates the angle between two touches relative to [0,1].",
            "itemtype": "method",
            "name": "calculateAngle",
            "static": 1,
            "params": [
                {
                    "name": "posA",
                    "description": "First touch location (x,y)",
                    "type": "Array"
                },
                {
                    "name": "posB",
                    "description": "Second touch location (x,y)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Inputs.TwoFingerInput",
            "namespace": "Inputs"
        },
        {
            "file": "samsara/inputs/TwoFingerInput.js",
            "line": 70,
            "description": "Calculates the distance between two touches.",
            "itemtype": "method",
            "name": "calculateDistance",
            "static": 1,
            "params": [
                {
                    "name": "posA",
                    "description": "First touch location (x,y)",
                    "type": "Array"
                },
                {
                    "name": "posB",
                    "description": "Second touch location (x,y)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Inputs.TwoFingerInput",
            "namespace": "Inputs"
        },
        {
            "file": "samsara/inputs/TwoFingerInput.js",
            "line": 85,
            "description": "Calculates the midpoint between two touches.",
            "itemtype": "method",
            "name": "calculateCenter",
            "static": 1,
            "params": [
                {
                    "name": "posA",
                    "description": "First touch location (x,y)",
                    "type": "Array"
                },
                {
                    "name": "posB",
                    "description": "Second touch location (x,y)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Inputs.TwoFingerInput",
            "namespace": "Inputs"
        },
        {
            "file": "samsara/layouts/DrawerLayout.js",
            "line": 185,
            "description": "Set the drawer component with a Surface of View.",
            "itemtype": "method",
            "name": "addDrawer",
            "params": [
                {
                    "name": "drawer",
                    "description": "",
                    "type": "Surface|View"
                }
            ],
            "class": "Layouts.DrawerLayout",
            "namespace": "Layouts"
        },
        {
            "file": "samsara/layouts/DrawerLayout.js",
            "line": 199,
            "description": "Set the content component with a Surface or View.",
            "itemtype": "method",
            "name": "addContent",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Surface|View"
                }
            ],
            "class": "Layouts.DrawerLayout",
            "namespace": "Layouts"
        },
        {
            "file": "samsara/layouts/DrawerLayout.js",
            "line": 216,
            "description": "Reveals the drawer with a transition.\n  Emits an `open` event when an opening transition has been committed to.",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "transition",
                    "description": "transition definition",
                    "type": "Boolean|Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Layouts.DrawerLayout",
            "namespace": "Layouts"
        },
        {
            "file": "samsara/layouts/DrawerLayout.js",
            "line": 232,
            "description": "Conceals the drawer with a transition.\n  Emits a `close` event when an closing transition has been committed to.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "transition",
                    "description": "transition definition",
                    "type": "Boolean|Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Layouts.DrawerLayout",
            "namespace": "Layouts"
        },
        {
            "file": "samsara/layouts/DrawerLayout.js",
            "line": 248,
            "description": "Toggles between open and closed states.",
            "itemtype": "method",
            "name": "toggle",
            "params": [
                {
                    "name": "transition",
                    "description": "transition definition",
                    "type": "Boolean|Object",
                    "optional": true
                }
            ],
            "class": "Layouts.DrawerLayout",
            "namespace": "Layouts"
        },
        {
            "file": "samsara/layouts/DrawerLayout.js",
            "line": 258,
            "description": "Sets the position in pixels for the content's displacement.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "position",
                    "description": "position",
                    "type": "Number"
                },
                {
                    "name": "transition",
                    "description": "transition definition",
                    "type": "Boolean|Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "callback",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Layouts.DrawerLayout",
            "namespace": "Layouts"
        },
        {
            "file": "samsara/layouts/DrawerLayout.js",
            "line": 270,
            "description": "Resets to last state of being open or closed",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "transition",
                    "description": "transition definition",
                    "type": "Boolean|Object",
                    "optional": true
                }
            ],
            "class": "Layouts.DrawerLayout",
            "namespace": "Layouts"
        },
        {
            "file": "samsara/layouts/FlexibleLayout.js",
            "line": 94,
            "description": "Add content as an array of Views or Surfaces.",
            "itemtype": "method",
            "name": "addItems",
            "params": [
                {
                    "name": "items",
                    "description": "An array of Views or Surfaces",
                    "type": "Array"
                }
            ],
            "class": "Layouts.FlexibleLayout",
            "namespace": "Layouts"
        },
        {
            "file": "samsara/layouts/GridLayout.js",
            "line": 77,
            "description": "Add items to the layout.",
            "itemtype": "method",
            "name": "addItems",
            "params": [
                {
                    "name": "items",
                    "description": "Array of Surfaces or Views",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "Layouts.GridLayout",
            "namespace": "Layouts"
        },
        {
            "file": "samsara/layouts/SequentialLayout.js",
            "line": 34,
            "description": "Add content as an array of Views or Surfaces.",
            "itemtype": "method",
            "name": "addItems",
            "params": [
                {
                    "name": "items",
                    "description": "An array of Views or Surfaces",
                    "type": "Array"
                }
            ],
            "class": "Layouts.SequentialLayout",
            "namespace": "Layouts"
        },
        {
            "file": "samsara/streams/Accumulator.js",
            "line": 83,
            "description": "Set accumulated value.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "sum",
                    "description": "Current value",
                    "type": "Number"
                },
                {
                    "name": "silent",
                    "description": "Flag to suppress events",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Streams.Accumulator",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/Accumulator.js",
            "line": 102,
            "description": "Returns current accumulated value.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Streams.Accumulator",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/Observable.js",
            "line": 28,
            "description": "Getter for the provided value.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "",
                "type": "Number, String, Array, Object"
            },
            "class": "Streams.Observable",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/Observable.js",
            "line": 38,
            "description": "Setter for the provided value.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": "Value",
                    "type": "Number, String, Array, Object"
                }
            ],
            "class": "Streams.Observable",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/ResizeStream.js",
            "line": 67,
            "description": "Extends SimpleStream.lift",
            "itemtype": "method",
            "name": "lift",
            "static": 1,
            "class": "Streams.ResizeStream",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/ResizeStream.js",
            "line": 75,
            "description": "Batches resize events for provided object of streams in\n {key : stream} pairs. Emits one `resize` event per Engine cycle.",
            "itemtype": "method",
            "name": "merge",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "streams",
                    "description": "Dictionary of `resize` streams",
                    "type": "Object"
                }
            ],
            "class": "Streams.ResizeStream",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/SimpleStream.js",
            "line": 29,
            "description": "Map converts the current stream into a new stream\n with a modified (mapped) data payload.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "mapperFn",
                    "description": "Function to map event payload",
                    "type": "Function"
                }
            ],
            "class": "Streams.SimpleStream",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/SimpleStream.js",
            "line": 43,
            "description": "Filter converts the current stream into a new stream\n that only emits if the filter condition is satisfied.\n The function should return a Boolean.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filterFn",
                    "description": "Function to filter event payload",
                    "type": "Function"
                }
            ],
            "class": "Streams.SimpleStream",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/SimpleStream.js",
            "line": 58,
            "description": "Split maps one of several streams based on custom logic.\n The function should return an EventEmitter.",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "splitterFn",
                    "description": "Splitter function",
                    "type": "Function"
                }
            ],
            "class": "Streams.SimpleStream",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/SimpleStream.js",
            "line": 72,
            "description": "Pluck is an opinionated mapper. It projects a Stream\n onto one of its return values.\n\n Useful if a Stream returns an array or an object.",
            "itemtype": "method",
            "name": "pluck",
            "params": [
                {
                    "name": "key",
                    "description": "Key to project event payload onto",
                    "type": "String|Number"
                }
            ],
            "class": "Streams.SimpleStream",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/SimpleStream.js",
            "line": 90,
            "description": "Lift is like map, except it maps several event sources,\n not only one.",
            "example": [
                "\n\n     var liftedStream = SimpleStream.lift(function(payload1, payload2){\n         return payload1 + payload2;\n     }, [stream2, stream2]);\n\n     liftedStream.on('name'), function(data){\n         // data = 3;\n     });\n\n     stream2.emit('name', 1);\n     stream2.emit('name', 2);"
            ],
            "itemtype": "method",
            "name": "lift",
            "static": 1,
            "params": [
                {
                    "name": "map",
                    "description": "Function to map stream payloads",
                    "type": "Function"
                },
                {
                    "name": "streams",
                    "description": "Stream sources",
                    "type": "Array|Object"
                }
            ],
            "class": "Streams.SimpleStream",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/SizeObservable.js",
            "line": 28,
            "description": "Getter for the provided size.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Streams.Observable",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/SizeObservable.js",
            "line": 38,
            "description": "Setter for the provided size.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": "Size",
                    "type": "Array"
                }
            ],
            "class": "Streams.Observable",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/Stream.js",
            "line": 141,
            "description": "Lift is like map, except it maps several event sources,\n not only one.",
            "example": [
                "\n\n     var liftedStream = Stream.lift(function(payload1, payload2){\n         return payload1 + payload2;\n     }, [stream2, stream2]);\n\n     liftedStream.on('name'), function(data){\n         // data = 3;\n     });\n\n     stream2.emit('name', 1);\n     stream2.emit('name', 2);"
            ],
            "itemtype": "method",
            "name": "lift",
            "static": 1,
            "params": [
                {
                    "name": "map",
                    "description": "Function to map stream payloads",
                    "type": "Function"
                },
                {
                    "name": "streams",
                    "description": "Stream sources",
                    "type": "Array|Object"
                }
            ],
            "class": "Streams.Stream",
            "namespace": "Streams"
        },
        {
            "file": "samsara/streams/Stream.js",
            "line": 165,
            "description": "Batches events for provided object of streams in\n {key : stream} pairs. Emits one event per Engine cycle.",
            "itemtype": "method",
            "name": "merge",
            "static": 1,
            "params": [
                {
                    "name": "streams",
                    "description": "Dictionary of `resize` streams",
                    "type": "Object"
                }
            ],
            "class": "Streams.Stream",
            "namespace": "Streams"
        },
        {
            "file": "samsara/transitions/Inertia.js",
            "line": 45,
            "description": "Set new value to transition to, with a transition definition.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": "Starting value",
                    "type": "Number"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Transitions.Inertia",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Inertia.js",
            "line": 67,
            "description": "Get current value.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Transitions.Inertia",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Inertia.js",
            "line": 77,
            "description": "Get current velocity",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Transitions.Inertia",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Inertia.js",
            "line": 87,
            "description": "Reset the value and velocity of the transition.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "value",
                    "description": "Value",
                    "type": "Number"
                },
                {
                    "name": "velocity",
                    "description": "Velocity",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Transitions.Inertia",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Inertia.js",
            "line": 99,
            "description": "Halt transition at current state and erase all pending actions.",
            "itemtype": "method",
            "name": "halt",
            "class": "Transitions.Inertia",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Inertia.js",
            "line": 112,
            "description": "Check to see if Inertia is actively transitioning",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Transitions.Inertia",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Inertia.js",
            "line": 122,
            "description": "Update the transition in time.",
            "itemtype": "method",
            "name": "update",
            "class": "Transitions.Inertia",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Spring.js",
            "line": 50,
            "description": "Set new value to transition to.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": "End value",
                    "type": "Number"
                },
                {
                    "name": "transition",
                    "description": "Transition definition",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Transitions.Spring",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Spring.js",
            "line": 79,
            "description": "Get current value.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Transitions.Spring",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Spring.js",
            "line": 89,
            "description": "Get current velocity",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Transitions.Spring",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Spring.js",
            "line": 99,
            "description": "Reset the value and velocity of the transition.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "value",
                    "description": "Value",
                    "type": "Number"
                },
                {
                    "name": "velocity",
                    "description": "Velocity",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Transitions.Spring",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Spring.js",
            "line": 111,
            "description": "Halt transition at current state and erase all pending actions.",
            "itemtype": "method",
            "name": "halt",
            "class": "Transitions.Spring",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Spring.js",
            "line": 124,
            "description": "Check to see if Spring is actively transitioning",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Transitions.Spring",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Spring.js",
            "line": 134,
            "description": "Update the transition in time.",
            "itemtype": "method",
            "name": "update",
            "class": "Transitions.Spring",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Tween.js",
            "line": 40,
            "description": "Default easing curves.",
            "itemtype": "property",
            "name": "CURVES",
            "type": "Object",
            "static": 1,
            "class": "Transitions.Tween",
            "namespace": "Transitions",
            "subprops": [
                {
                    "name": "linear",
                    "description": "Linear interpolation",
                    "type": "Function"
                },
                {
                    "name": "easeIn",
                    "description": "EaseIn interpolation. Deceleration from zero velocity.",
                    "type": "Function"
                },
                {
                    "name": "easeInCubic",
                    "description": "Cubic interpolation. Acceleration from zero velocity.",
                    "type": "Function"
                },
                {
                    "name": "easeOut",
                    "description": "EaseOut interpolation. Acceleration from zero velocity.",
                    "type": "Function"
                },
                {
                    "name": "easeOutCubic",
                    "description": "Cubic interpolation. Deceleration from zero velocity.",
                    "type": "Function"
                },
                {
                    "name": "easeOutWall",
                    "description": "Interpolation with wall boundary."
                },
                {
                    "name": "easeInOut",
                    "description": "EaseInOut interpolation. Acceleration then deceleration.",
                    "type": "Function"
                },
                {
                    "name": "easeInOutCubic",
                    "description": "Cubic interpolation. Acceleration then deceleration.",
                    "type": "Function"
                }
            ]
        },
        {
            "file": "samsara/transitions/Tween.js",
            "line": 104,
            "description": "A way of registering custom easing curves by name.\n Curves are functions that take a number between 0 and 1 and return\n a number (often between 0 and 1, but can over/under shoot).",
            "itemtype": "method",
            "name": "register",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Identifying name",
                    "type": "String"
                },
                {
                    "name": "curve",
                    "description": "Function defined on the domain [0,1]",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "False if key is taken, else true",
                "type": "Boolean"
            },
            "class": "Transitions.Tween",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Tween.js",
            "line": 123,
            "description": "Remove curve from internal registry. Undoes work of `register`.",
            "itemtype": "method",
            "name": "deregister",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "Name dictionary key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "False if key doesn't exist",
                "type": "Boolean"
            },
            "class": "Transitions.Tween",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Tween.js",
            "line": 139,
            "description": "Retrieve all registered curves.",
            "itemtype": "method",
            "name": "getCurves",
            "static": 1,
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Transitions.Tween",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Tween.js",
            "line": 150,
            "description": "Set new value to transition to.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "endValue",
                    "description": "End value",
                    "type": "Number|Number[]"
                },
                {
                    "name": "transition",
                    "description": "Transition object of type\n                                     {duration: number, curve: name}",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Transitions.Tween",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Tween.js",
            "line": 180,
            "description": "Get current value.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "",
                "type": "Number|Number[]"
            },
            "class": "Transitions.Tween",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Tween.js",
            "line": 190,
            "description": "Get current velocity",
            "itemtype": "method",
            "name": "getVelocity",
            "return": {
                "description": "",
                "type": "Number|Number[]"
            },
            "class": "Transitions.Tween",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Tween.js",
            "line": 200,
            "description": "Reset the value and velocity of the transition.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "value",
                    "description": "Value",
                    "type": "Number|Number[]"
                },
                {
                    "name": "velocity",
                    "description": "Velocity",
                    "type": "Number|Number[]",
                    "optional": true
                }
            ],
            "class": "Transitions.Tween",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Tween.js",
            "line": 212,
            "description": "Halt transition at current state and erase all pending actions.",
            "itemtype": "method",
            "name": "halt",
            "class": "Transitions.Tween",
            "namespace": "Transitions"
        },
        {
            "file": "samsara/transitions/Tween.js",
            "line": 224,
            "description": "Update the transition in time.",
            "itemtype": "method",
            "name": "update",
            "class": "Transitions.Tween",
            "namespace": "Transitions"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " samsara/inputs/MouseInput.js:19"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " samsara/transitions/Inertia.js:77"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " samsara/transitions/Inertia.js:112"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " samsara/transitions/Spring.js:89"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " samsara/transitions/Spring.js:124"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " samsara/transitions/Tween.js:190"
        },
        {
            "message": "Missing item type\nQueue that batches `end` and `dirty` events.\n This queue is traversed after the `postTickQueue` by the Engine.",
            "line": " samsara/core/queues/dirtyQueue.js:4"
        },
        {
            "message": "Missing item type\nQueue that batches `update` events.\n This queue is traversed after the `preTickQueue` but before `dirtQueue`\n by the Engine.",
            "line": " samsara/core/queues/postTickQueue.js:4"
        },
        {
            "message": "Missing item type\nQueue that batches `start` events.\n This queue is traversed first (but after DOM events are executed) by the Engine.",
            "line": " samsara/core/queues/preTickQueue.js:4"
        },
        {
            "message": "Missing item type\nThis queue is executed before the postTickQueue and after the preTickQueue.\n however, it differs in that the Engine does not clear the queue.\n This must be done manually.",
            "line": " samsara/core/queues/tickQueue.js:4"
        }
    ]
}